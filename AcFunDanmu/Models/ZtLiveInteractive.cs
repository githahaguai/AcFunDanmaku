// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: zt.live.interactive.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace AcFunDanmu {

  /// <summary>Holder for reflection information generated from zt.live.interactive.proto</summary>
  public static partial class ZtLiveInteractiveReflection {

    #region Descriptor
    /// <summary>File descriptor for zt.live.interactive.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ZtLiveInteractiveReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Chl6dC5saXZlLmludGVyYWN0aXZlLnByb3RvEgpBY0Z1bkRhbm11Ik8KC1p0",
            "TGl2ZUNzQ21kEg8KB2NtZFR5cGUYASABKAkSDwoHcGF5bG9hZBgCIAEoDBIO",
            "CgZ0aWNrZXQYAyABKAkSDgoGbGl2ZUlkGAQgASgJIloKDlp0TGl2ZUNzQ21k",
            "QWNrEhIKCmNtZEFja1R5cGUYASABKAkSEQoJZXJyb3JDb2RlGAIgASgDEhAK",
            "CGVycm9yTXNnGAMgASgJEg8KB3BheWxvYWQYBCABKAwiiwEKEVp0TGl2ZUNz",
            "RW50ZXJSb29tEhAKCGlzQXV0aG9yGAEgASgIEhYKDnJlY29ubmVjdENvdW50",
            "GAIgASgFEhUKDWxhc3RFcnJvckNvZGUYAyABKAUSFwoPZW50ZXJSb29tQXR0",
            "YWNoGAQgASgJEhwKFGNsaWVudExpdmVTZGtWZXJzaW9uGAUgASgJIjMKFFp0",
            "TGl2ZUNzRW50ZXJSb29tQWNrEhsKE2hlYXJ0YmVhdEludGVydmFsTXMYASAB",
            "KAMiEgoQWnRMaXZlQ3NVc2VyRXhpdCIVChNadExpdmVDc1VzZXJFeGl0QWNr",
            "IkAKEVp0TGl2ZUNzSGVhcnRiZWF0EhkKEWNsaWVudFRpbWVzdGFtcE1zGAEg",
            "ASgDEhAKCHNlcXVlbmNlGAIgASgDImQKFFp0TGl2ZUNzSGVhcnRiZWF0QWNr",
            "EhkKEXNlcnZlclRpbWVzdGFtcE1zGAEgASgDEhkKEWNsaWVudFRpbWVzdGFt",
            "cE1zGAIgASgDEhYKDmNsaWVudFNlcXVlbmNlGAMgASgDIuwBCg9adExpdmVT",
            "Y01lc3NhZ2USEwoLbWVzc2FnZVR5cGUYASABKAkSRAoPY29tcHJlc3Npb25U",
            "eXBlGAIgASgOMisuQWNGdW5EYW5tdS5adExpdmVTY01lc3NhZ2UuQ29tcHJl",
            "c3Npb25UeXBlEg8KB3BheWxvYWQYAyABKAwSDgoGbGl2ZUlkGAQgASgJEg4K",
            "BnRpY2tldBgFIAEoCRIZChFzZXJ2ZXJUaW1lc3RhbXBNcxgGIAEoAyIyCg9D",
            "b21wcmVzc2lvblR5cGUSCwoHVU5LTk9XThAAEggKBE5PTkUQARIICgRHWklQ",
            "EAIiPQoWWnRMaXZlQWN0aW9uU2lnbmFsSXRlbRISCgpzaW5nYWxUeXBlGAEg",
            "ASgJEg8KB3BheWxvYWQYAiADKAwiSAoUWnRMaXZlU2NBY3Rpb25TaWduYWwS",
            "MAoEaXRlbRgBIAMoCzIiLkFjRnVuRGFubXUuWnRMaXZlQWN0aW9uU2lnbmFs",
            "SXRlbSI8ChVadExpdmVTdGF0ZVNpZ25hbEl0ZW0SEgoKc2luZ2FsVHlwZRgB",
            "IAEoCRIPCgdwYXlsb2FkGAIgASgMIkYKE1p0TGl2ZVNjU3RhdGVTaWduYWwS",
            "LwoEaXRlbRgBIAMoCzIhLkFjRnVuRGFubXUuWnRMaXZlU3RhdGVTaWduYWxJ",
            "dGVtIj0KFlp0TGl2ZU5vdGlmeVNpZ25hbEl0ZW0SEgoKc2lnbmFsVHlwZRgB",
            "IAEoCRIPCgdwYXlsb2FkGAIgASgMIkgKFFp0TGl2ZVNjTm90aWZ5U2lnbmFs",
            "EjAKBGl0ZW0YASADKAsyIi5BY0Z1bkRhbm11Llp0TGl2ZU5vdGlmeVNpZ25h",
            "bEl0ZW0iqgIKFVp0TGl2ZVNjU3RhdHVzQ2hhbmdlZBI0CgR0eXBlGAEgASgO",
            "MiYuQWNGdW5EYW5tdS5adExpdmVTY1N0YXR1c0NoYW5nZWQuVHlwZRIYChBt",
            "YXhSYW5kb21EZWxheU1zGAIgASgDEkAKCmJhbm5lZEluZm8YAyABKAsyLC5B",
            "Y0Z1bkRhbm11Llp0TGl2ZVNjU3RhdHVzQ2hhbmdlZC5CYW5uZWRJbmZvGh8K",
            "CkJhbm5lZEluZm8SEQoJYmFuUmVhc29uGAEgASgJIl4KBFR5cGUSCwoHVU5L",
            "Tk9XThAAEg8KC0xJVkVfQ0xPU0VEEAESEQoNTElWRV9SRU9QRU5FRBACEhQK",
            "EExJVkVfVVJMX0NIQU5HRUQQAxIPCgtMSVZFX0JBTk5FRBAEIhcKFVp0TGl2",
            "ZVNjVGlja2V0SW52YWxpZCJcCg5adExpdmVVc2VySW5mbxIOCgZ1c2VySWQY",
            "ASABKAMSEAoIbmlja25hbWUYAiABKAkSKAoGYXZhdGFyGAMgAygLMhguQWNG",
            "dW5EYW5tdS5JbWFnZUNkbk5vZGUiPAoMSW1hZ2VDZG5Ob2RlEgsKA2NkbhgB",
            "IAEoCRILCgN1cmwYAiABKAkSEgoKdXJsUGF0dGVybhgDIAEoCSJuChlDb21t",
            "b25BY3Rpb25TaWduYWxDb21tZW50Eg8KB2NvbnRlbnQYASABKAkSEgoKc2Vu",
            "ZFRpbWVNcxgCIAEoAxIsCgh1c2VySW5mbxgDIAEoCzIaLkFjRnVuRGFubXUu",
            "WnRMaXZlVXNlckluZm8iWgoWQ29tbW9uQWN0aW9uU2lnbmFsTGlrZRIsCgh1",
            "c2VySW5mbxgBIAEoCzIaLkFjRnVuRGFubXUuWnRMaXZlVXNlckluZm8SEgoK",
            "c2VuZFRpbWVNcxgCIAEoAyJjCh9Db21tb25BY3Rpb25TaWduYWxVc2VyRW50",
            "ZXJSb29tEiwKCHVzZXJJbmZvGAEgASgLMhouQWNGdW5EYW5tdS5adExpdmVV",
            "c2VySW5mbxISCgpzZW5kVGltZU1zGAIgASgDImYKIkNvbW1vbkFjdGlvblNp",
            "Z25hbFVzZXJGb2xsb3dBdXRob3ISLAoIdXNlckluZm8YASABKAsyGi5BY0Z1",
            "bkRhbm11Llp0TGl2ZVVzZXJJbmZvEhIKCnNlbmRUaW1lTXMYAiABKAMi3QEK",
            "FkNvbW1vbkFjdGlvblNpZ25hbEdpZnQSKAoEdXNlchgBIAEoCzIaLkFjRnVu",
            "RGFubXUuWnRMaXZlVXNlckluZm8SEgoKc2VuZFRpbWVNcxgCIAEoAxIOCgZn",
            "aWZ0SWQYAyABKAUSDQoFY291bnQYBCABKAUSDQoFY29tYm8YBSABKAUSDQoF",
            "dmFsdWUYBiABKAUSDwoHY29tYm9JZBgHIAEoCRIdChVzbG90RGlzcGxheUR1",
            "cmF0aW9uTXMYCCABKAUSGAoQZXhwaXJlRHVyYXRpb25NcxgJIAEoBSItChtD",
            "b21tb25Ob3RpZnlTaWduYWxLaWNrZWRPdXQSDgoGcmVhc29uGAEgASgJIjwK",
            "IENvbW1vbk5vdGlmeVNpZ25hbFZpb2xhdGlvbkFsZXJ0EhgKEHZpb2xhdGlv",
            "bkNvbnRlbnQYASABKAkiWwocQ29tbW9uU3RhdGVTaWduYWxEaXNwbGF5SW5m",
            "bxIVCg13YXRjaGluZ0NvdW50GAEgASgJEhEKCWxpa2VDb3VudBgCIAEoCRIR",
            "CglsaWtlRGVsdGEYAyABKAUi5AEKGUNvbW1vblN0YXRlU2lnbmFsVG9wVXNl",
            "cnMSOwoEdXNlchgBIAMoCzItLkFjRnVuRGFubXUuQ29tbW9uU3RhdGVTaWdu",
            "YWxUb3BVc2Vycy5Ub3BVc2VyGokBCgdUb3BVc2VyEiwKCHVzZXJJbmZvGAEg",
            "ASgLMhouQWNGdW5EYW5tdS5adExpdmVVc2VySW5mbxIeChZjdXN0b21XYXRj",
            "aGluZ0xpc3REYXRhGAIgASgJEhkKEWRpc3BsYXlTZW5kQW1vdW50GAMgASgJ",
            "EhUKDWFub255bW91c1VzZXIYBCABKAgiWAoeQ29tbW9uU3RhdGVTaWduYWxS",
            "ZWNlbnRDb21tZW50EjYKB2NvbW1lbnQYASADKAsyJS5BY0Z1bkRhbm11LkNv",
            "bW1vbkFjdGlvblNpZ25hbENvbW1lbnQiOwoZQ29tbW9uU3RhdGVTaWduYWxD",
            "aGF0Q2FsbBIOCgZjaGF0SWQYASABKAkSDgoGbGl2ZUlkGAIgASgJInQKG0Nv",
            "bW1vblN0YXRlU2lnbmFsQ2hhdEFjY2VwdBIOCgZjaGF0SWQYASABKAkSLAoJ",
            "bWVkaWFUeXBlGAIgASgOMhkuQWNGdW5EYW5tdS5DaGF0TWVkaWFUeXBlEhcK",
            "D2FycmF5U2lnbmFsSW5mbxgDIAEoCSJyChpDb21tb25TdGF0ZVNpZ25hbENo",
            "YXRSZWFkeRIOCgZjaGF0SWQYASABKAkSMQoNZ3Vlc3RVc2VySW5mbxgCIAEo",
            "CzIaLkFjRnVuRGFubXUuWnRMaXZlVXNlckluZm8SEQoJbWVkaWFUeXBlGAMg",
            "ASgFIp0CChhDb21tb25TdGF0ZVNpZ25hbENoYXRFbmQSDgoGY2hhdElkGAEg",
            "ASgJEj0KB2VuZFR5cGUYAiABKA4yLC5BY0Z1bkRhbm11LkNvbW1vblN0YXRl",
            "U2lnbmFsQ2hhdEVuZC5FbmRUeXBlIrEBCgdFbmRUeXBlEgsKB1VOS05PV04Q",
            "ABIUChBDQU5DRUxfQllfQVVUSE9SEAESEQoNRU5EX0JZX0FVVEhPUhACEhAK",
            "DEVORF9CWV9HVUVTVBADEhAKDEdVRVNUX1JFSkVDVBAEEhEKDUdVRVNUX1RJ",
            "TUVPVVQQBRIbChdHVUVTVF9IRUFSVEJFQVRfVElNRU9VVBAGEhwKGEFVVEhP",
            "Ul9IRUFSVEJFQVRfVElNRU9VVBAHIscCChlDb21tb25TdGF0ZVNpZ25hbFJp",
            "Y2hUZXh0EkAKAWEYASADKAsyNS5BY0Z1bkRhbm11LkNvbW1vblN0YXRlU2ln",
            "bmFsUmljaFRleHQuUmljaFRleHRTZWdtZW50EgkKAWIYAiABKAMaSQoMSW1h",
            "Z2VTZWdtZW50EiMKAWEYASADKAsyGC5BY0Z1bkRhbm11LkltYWdlQ2RuTm9k",
            "ZRIJCgFiGAIgASgJEgkKAWMYAyABKAkaJAoMUGxhaW5TZWdtZW50EgkKAWEY",
            "ASABKAkSCQoBYhgCIAEoCRonCg9SaWNoVGV4dFNlZ21lbnQSCQoBYRgBIAEo",
            "BRIJCgFiGAIgASgMGkMKD1VzZXJJbmZvU2VnbWVudBIlCgFhGAEgASgLMhou",
            "QWNGdW5EYW5tdS5adExpdmVVc2VySW5mbxIJCgFiGAIgASgJIt0BCiNDb21t",
            "b25TdGF0ZVNpZ25hbEN1cnJlbnRSZWRwYWNrTGlzdBJCCgFhGAEgAygLMjcu",
            "QWNGdW5EYW5tdS5Db21tb25TdGF0ZVNpZ25hbEN1cnJlbnRSZWRwYWNrTGlz",
            "dC5SZWRwYWNrGnIKB1JlZHBhY2sSJQoBYRgBIAEoCzIaLkFjRnVuRGFubXUu",
            "WnRMaXZlVXNlckluZm8SCQoBYhgCIAEoBRIJCgFjGAMgASgDEgkKAWQYBCAB",
            "KAMSCQoBZRgFIAEoCRIJCgFmGAYgASgJEgkKAWcYByABKAMiTAohQ29tbW9u",
            "U3RhdGVTaWduYWxGZWF0dXJlU3RhdGVTeW5jEicKAWEYASADKAsyHC5BY0Z1",
            "bkRhbm11LkxpdmVGZWF0dXJlU3RhdGUiKAoQTGl2ZUZlYXR1cmVTdGF0ZRIJ",
            "CgFhGAEgASgFEgkKAWIYAiABKAUqMgoNQ2hhdE1lZGlhVHlwZRILCgdVTktO",
            "T1dOEAASCQoFQVVESU8QARIJCgVWSURFTxACKsUBCg5Dc0Fja0Vycm9yQ29k",
            "ZRISCg5TVUNDRVNTX0NTX0FDSxAAEg8KC0xJVkVfQ0xPU0VEEAESEgoOVElD",
            "S0VUX0lMTEVHQUwQAhISCg5BVFRBQ0hfSUxMRUdBTBADEhQKEFVTRVJfTk9U",
            "X0lOX1JPT00QBBIQCgxTRVJWRVJfRVJST1IQBRIZChVSRVFVRVNUX1BBUkFN",
            "X0lOVkFMSUQQBhIjCh9ST09NX05PVF9FWElTVF9JTl9TVEFURV9NQU5BR0VS",
            "EAcqlwEKIFp0TGl2ZURvd25zdHJlYW1QYXlsb2FkRXJyb3JDb2RlEh4KGlNV",
            "Q0NFU1NfRE9XTlNUUkVBTV9QQVlMT0FEEAASGAoSQ1NfQ01EX1BBUlNFX0VS",
            "Uk9SEKGNBhIcChZDU19DTURfQ01EX05PVF9TVVBQT1JUEKKNBhIbChVDU19D",
            "TURfVElDS0VUX0lMTEVHQUwQo40GYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::AcFunDanmu.ChatMediaType), typeof(global::AcFunDanmu.CsAckErrorCode), typeof(global::AcFunDanmu.ZtLiveDownstreamPayloadErrorCode), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::AcFunDanmu.ZtLiveCsCmd), global::AcFunDanmu.ZtLiveCsCmd.Parser, new[]{ "CmdType", "Payload", "Ticket", "LiveId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AcFunDanmu.ZtLiveCsCmdAck), global::AcFunDanmu.ZtLiveCsCmdAck.Parser, new[]{ "CmdAckType", "ErrorCode", "ErrorMsg", "Payload" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AcFunDanmu.ZtLiveCsEnterRoom), global::AcFunDanmu.ZtLiveCsEnterRoom.Parser, new[]{ "IsAuthor", "ReconnectCount", "LastErrorCode", "EnterRoomAttach", "ClientLiveSdkVersion" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AcFunDanmu.ZtLiveCsEnterRoomAck), global::AcFunDanmu.ZtLiveCsEnterRoomAck.Parser, new[]{ "HeartbeatIntervalMs" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AcFunDanmu.ZtLiveCsUserExit), global::AcFunDanmu.ZtLiveCsUserExit.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AcFunDanmu.ZtLiveCsUserExitAck), global::AcFunDanmu.ZtLiveCsUserExitAck.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AcFunDanmu.ZtLiveCsHeartbeat), global::AcFunDanmu.ZtLiveCsHeartbeat.Parser, new[]{ "ClientTimestampMs", "Sequence" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AcFunDanmu.ZtLiveCsHeartbeatAck), global::AcFunDanmu.ZtLiveCsHeartbeatAck.Parser, new[]{ "ServerTimestampMs", "ClientTimestampMs", "ClientSequence" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AcFunDanmu.ZtLiveScMessage), global::AcFunDanmu.ZtLiveScMessage.Parser, new[]{ "MessageType", "CompressionType", "Payload", "LiveId", "Ticket", "ServerTimestampMs" }, null, new[]{ typeof(global::AcFunDanmu.ZtLiveScMessage.Types.CompressionType) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AcFunDanmu.ZtLiveActionSignalItem), global::AcFunDanmu.ZtLiveActionSignalItem.Parser, new[]{ "SingalType", "Payload" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AcFunDanmu.ZtLiveScActionSignal), global::AcFunDanmu.ZtLiveScActionSignal.Parser, new[]{ "Item" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AcFunDanmu.ZtLiveStateSignalItem), global::AcFunDanmu.ZtLiveStateSignalItem.Parser, new[]{ "SingalType", "Payload" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AcFunDanmu.ZtLiveScStateSignal), global::AcFunDanmu.ZtLiveScStateSignal.Parser, new[]{ "Item" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AcFunDanmu.ZtLiveNotifySignalItem), global::AcFunDanmu.ZtLiveNotifySignalItem.Parser, new[]{ "SignalType", "Payload" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AcFunDanmu.ZtLiveScNotifySignal), global::AcFunDanmu.ZtLiveScNotifySignal.Parser, new[]{ "Item" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AcFunDanmu.ZtLiveScStatusChanged), global::AcFunDanmu.ZtLiveScStatusChanged.Parser, new[]{ "Type", "MaxRandomDelayMs", "BannedInfo" }, null, new[]{ typeof(global::AcFunDanmu.ZtLiveScStatusChanged.Types.Type) }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::AcFunDanmu.ZtLiveScStatusChanged.Types.BannedInfo), global::AcFunDanmu.ZtLiveScStatusChanged.Types.BannedInfo.Parser, new[]{ "BanReason" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::AcFunDanmu.ZtLiveScTicketInvalid), global::AcFunDanmu.ZtLiveScTicketInvalid.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AcFunDanmu.ZtLiveUserInfo), global::AcFunDanmu.ZtLiveUserInfo.Parser, new[]{ "UserId", "Nickname", "Avatar" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AcFunDanmu.ImageCdnNode), global::AcFunDanmu.ImageCdnNode.Parser, new[]{ "Cdn", "Url", "UrlPattern" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AcFunDanmu.CommonActionSignalComment), global::AcFunDanmu.CommonActionSignalComment.Parser, new[]{ "Content", "SendTimeMs", "UserInfo" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AcFunDanmu.CommonActionSignalLike), global::AcFunDanmu.CommonActionSignalLike.Parser, new[]{ "UserInfo", "SendTimeMs" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AcFunDanmu.CommonActionSignalUserEnterRoom), global::AcFunDanmu.CommonActionSignalUserEnterRoom.Parser, new[]{ "UserInfo", "SendTimeMs" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AcFunDanmu.CommonActionSignalUserFollowAuthor), global::AcFunDanmu.CommonActionSignalUserFollowAuthor.Parser, new[]{ "UserInfo", "SendTimeMs" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AcFunDanmu.CommonActionSignalGift), global::AcFunDanmu.CommonActionSignalGift.Parser, new[]{ "User", "SendTimeMs", "GiftId", "Count", "Combo", "Value", "ComboId", "SlotDisplayDurationMs", "ExpireDurationMs" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AcFunDanmu.CommonNotifySignalKickedOut), global::AcFunDanmu.CommonNotifySignalKickedOut.Parser, new[]{ "Reason" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AcFunDanmu.CommonNotifySignalViolationAlert), global::AcFunDanmu.CommonNotifySignalViolationAlert.Parser, new[]{ "ViolationContent" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AcFunDanmu.CommonStateSignalDisplayInfo), global::AcFunDanmu.CommonStateSignalDisplayInfo.Parser, new[]{ "WatchingCount", "LikeCount", "LikeDelta" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AcFunDanmu.CommonStateSignalTopUsers), global::AcFunDanmu.CommonStateSignalTopUsers.Parser, new[]{ "User" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::AcFunDanmu.CommonStateSignalTopUsers.Types.TopUser), global::AcFunDanmu.CommonStateSignalTopUsers.Types.TopUser.Parser, new[]{ "UserInfo", "CustomWatchingListData", "DisplaySendAmount", "AnonymousUser" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::AcFunDanmu.CommonStateSignalRecentComment), global::AcFunDanmu.CommonStateSignalRecentComment.Parser, new[]{ "Comment" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AcFunDanmu.CommonStateSignalChatCall), global::AcFunDanmu.CommonStateSignalChatCall.Parser, new[]{ "ChatId", "LiveId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AcFunDanmu.CommonStateSignalChatAccept), global::AcFunDanmu.CommonStateSignalChatAccept.Parser, new[]{ "ChatId", "MediaType", "ArraySignalInfo" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AcFunDanmu.CommonStateSignalChatReady), global::AcFunDanmu.CommonStateSignalChatReady.Parser, new[]{ "ChatId", "GuestUserInfo", "MediaType" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AcFunDanmu.CommonStateSignalChatEnd), global::AcFunDanmu.CommonStateSignalChatEnd.Parser, new[]{ "ChatId", "EndType" }, null, new[]{ typeof(global::AcFunDanmu.CommonStateSignalChatEnd.Types.EndType) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AcFunDanmu.CommonStateSignalRichText), global::AcFunDanmu.CommonStateSignalRichText.Parser, new[]{ "A", "B" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::AcFunDanmu.CommonStateSignalRichText.Types.ImageSegment), global::AcFunDanmu.CommonStateSignalRichText.Types.ImageSegment.Parser, new[]{ "A", "B", "C" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AcFunDanmu.CommonStateSignalRichText.Types.PlainSegment), global::AcFunDanmu.CommonStateSignalRichText.Types.PlainSegment.Parser, new[]{ "A", "B" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AcFunDanmu.CommonStateSignalRichText.Types.RichTextSegment), global::AcFunDanmu.CommonStateSignalRichText.Types.RichTextSegment.Parser, new[]{ "A", "B" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AcFunDanmu.CommonStateSignalRichText.Types.UserInfoSegment), global::AcFunDanmu.CommonStateSignalRichText.Types.UserInfoSegment.Parser, new[]{ "A", "B" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::AcFunDanmu.CommonStateSignalCurrentRedpackList), global::AcFunDanmu.CommonStateSignalCurrentRedpackList.Parser, new[]{ "A" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::AcFunDanmu.CommonStateSignalCurrentRedpackList.Types.Redpack), global::AcFunDanmu.CommonStateSignalCurrentRedpackList.Types.Redpack.Parser, new[]{ "A", "B", "C", "D", "E", "F", "G" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::AcFunDanmu.CommonStateSignalFeatureStateSync), global::AcFunDanmu.CommonStateSignalFeatureStateSync.Parser, new[]{ "A" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AcFunDanmu.LiveFeatureState), global::AcFunDanmu.LiveFeatureState.Parser, new[]{ "A", "B" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum ChatMediaType {
    [pbr::OriginalName("UNKNOWN")] Unknown = 0,
    [pbr::OriginalName("AUDIO")] Audio = 1,
    [pbr::OriginalName("VIDEO")] Video = 2,
  }

  public enum CsAckErrorCode {
    [pbr::OriginalName("SUCCESS_CS_ACK")] SuccessCsAck = 0,
    [pbr::OriginalName("LIVE_CLOSED")] LiveClosed = 1,
    [pbr::OriginalName("TICKET_ILLEGAL")] TicketIllegal = 2,
    [pbr::OriginalName("ATTACH_ILLEGAL")] AttachIllegal = 3,
    [pbr::OriginalName("USER_NOT_IN_ROOM")] UserNotInRoom = 4,
    [pbr::OriginalName("SERVER_ERROR")] ServerError = 5,
    [pbr::OriginalName("REQUEST_PARAM_INVALID")] RequestParamInvalid = 6,
    [pbr::OriginalName("ROOM_NOT_EXIST_IN_STATE_MANAGER")] RoomNotExistInStateManager = 7,
  }

  public enum ZtLiveDownstreamPayloadErrorCode {
    [pbr::OriginalName("SUCCESS_DOWNSTREAM_PAYLOAD")] SuccessDownstreamPayload = 0,
    [pbr::OriginalName("CS_CMD_PARSE_ERROR")] CsCmdParseError = 100001,
    [pbr::OriginalName("CS_CMD_CMD_NOT_SUPPORT")] CsCmdCmdNotSupport = 100002,
    [pbr::OriginalName("CS_CMD_TICKET_ILLEGAL")] CsCmdTicketIllegal = 100003,
  }

  #endregion

  #region Messages
  public sealed partial class ZtLiveCsCmd : pb::IMessage<ZtLiveCsCmd> {
    private static readonly pb::MessageParser<ZtLiveCsCmd> _parser = new pb::MessageParser<ZtLiveCsCmd>(() => new ZtLiveCsCmd());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ZtLiveCsCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AcFunDanmu.ZtLiveInteractiveReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ZtLiveCsCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ZtLiveCsCmd(ZtLiveCsCmd other) : this() {
      cmdType_ = other.cmdType_;
      payload_ = other.payload_;
      ticket_ = other.ticket_;
      liveId_ = other.liveId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ZtLiveCsCmd Clone() {
      return new ZtLiveCsCmd(this);
    }

    /// <summary>Field number for the "cmdType" field.</summary>
    public const int CmdTypeFieldNumber = 1;
    private string cmdType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CmdType {
      get { return cmdType_; }
      set {
        cmdType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "payload" field.</summary>
    public const int PayloadFieldNumber = 2;
    private pb::ByteString payload_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Payload {
      get { return payload_; }
      set {
        payload_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ticket" field.</summary>
    public const int TicketFieldNumber = 3;
    private string ticket_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Ticket {
      get { return ticket_; }
      set {
        ticket_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "liveId" field.</summary>
    public const int LiveIdFieldNumber = 4;
    private string liveId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LiveId {
      get { return liveId_; }
      set {
        liveId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ZtLiveCsCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ZtLiveCsCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CmdType != other.CmdType) return false;
      if (Payload != other.Payload) return false;
      if (Ticket != other.Ticket) return false;
      if (LiveId != other.LiveId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CmdType.Length != 0) hash ^= CmdType.GetHashCode();
      if (Payload.Length != 0) hash ^= Payload.GetHashCode();
      if (Ticket.Length != 0) hash ^= Ticket.GetHashCode();
      if (LiveId.Length != 0) hash ^= LiveId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CmdType.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(CmdType);
      }
      if (Payload.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Payload);
      }
      if (Ticket.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Ticket);
      }
      if (LiveId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(LiveId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CmdType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CmdType);
      }
      if (Payload.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Payload);
      }
      if (Ticket.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Ticket);
      }
      if (LiveId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LiveId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ZtLiveCsCmd other) {
      if (other == null) {
        return;
      }
      if (other.CmdType.Length != 0) {
        CmdType = other.CmdType;
      }
      if (other.Payload.Length != 0) {
        Payload = other.Payload;
      }
      if (other.Ticket.Length != 0) {
        Ticket = other.Ticket;
      }
      if (other.LiveId.Length != 0) {
        LiveId = other.LiveId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            CmdType = input.ReadString();
            break;
          }
          case 18: {
            Payload = input.ReadBytes();
            break;
          }
          case 26: {
            Ticket = input.ReadString();
            break;
          }
          case 34: {
            LiveId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ZtLiveCsCmdAck : pb::IMessage<ZtLiveCsCmdAck> {
    private static readonly pb::MessageParser<ZtLiveCsCmdAck> _parser = new pb::MessageParser<ZtLiveCsCmdAck>(() => new ZtLiveCsCmdAck());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ZtLiveCsCmdAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AcFunDanmu.ZtLiveInteractiveReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ZtLiveCsCmdAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ZtLiveCsCmdAck(ZtLiveCsCmdAck other) : this() {
      cmdAckType_ = other.cmdAckType_;
      errorCode_ = other.errorCode_;
      errorMsg_ = other.errorMsg_;
      payload_ = other.payload_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ZtLiveCsCmdAck Clone() {
      return new ZtLiveCsCmdAck(this);
    }

    /// <summary>Field number for the "cmdAckType" field.</summary>
    public const int CmdAckTypeFieldNumber = 1;
    private string cmdAckType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CmdAckType {
      get { return cmdAckType_; }
      set {
        cmdAckType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "errorCode" field.</summary>
    public const int ErrorCodeFieldNumber = 2;
    private long errorCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ErrorCode {
      get { return errorCode_; }
      set {
        errorCode_ = value;
      }
    }

    /// <summary>Field number for the "errorMsg" field.</summary>
    public const int ErrorMsgFieldNumber = 3;
    private string errorMsg_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ErrorMsg {
      get { return errorMsg_; }
      set {
        errorMsg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "payload" field.</summary>
    public const int PayloadFieldNumber = 4;
    private pb::ByteString payload_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Payload {
      get { return payload_; }
      set {
        payload_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ZtLiveCsCmdAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ZtLiveCsCmdAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CmdAckType != other.CmdAckType) return false;
      if (ErrorCode != other.ErrorCode) return false;
      if (ErrorMsg != other.ErrorMsg) return false;
      if (Payload != other.Payload) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CmdAckType.Length != 0) hash ^= CmdAckType.GetHashCode();
      if (ErrorCode != 0L) hash ^= ErrorCode.GetHashCode();
      if (ErrorMsg.Length != 0) hash ^= ErrorMsg.GetHashCode();
      if (Payload.Length != 0) hash ^= Payload.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CmdAckType.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(CmdAckType);
      }
      if (ErrorCode != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(ErrorCode);
      }
      if (ErrorMsg.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ErrorMsg);
      }
      if (Payload.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(Payload);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CmdAckType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CmdAckType);
      }
      if (ErrorCode != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ErrorCode);
      }
      if (ErrorMsg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ErrorMsg);
      }
      if (Payload.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Payload);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ZtLiveCsCmdAck other) {
      if (other == null) {
        return;
      }
      if (other.CmdAckType.Length != 0) {
        CmdAckType = other.CmdAckType;
      }
      if (other.ErrorCode != 0L) {
        ErrorCode = other.ErrorCode;
      }
      if (other.ErrorMsg.Length != 0) {
        ErrorMsg = other.ErrorMsg;
      }
      if (other.Payload.Length != 0) {
        Payload = other.Payload;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            CmdAckType = input.ReadString();
            break;
          }
          case 16: {
            ErrorCode = input.ReadInt64();
            break;
          }
          case 26: {
            ErrorMsg = input.ReadString();
            break;
          }
          case 34: {
            Payload = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ZtLiveCsEnterRoom : pb::IMessage<ZtLiveCsEnterRoom> {
    private static readonly pb::MessageParser<ZtLiveCsEnterRoom> _parser = new pb::MessageParser<ZtLiveCsEnterRoom>(() => new ZtLiveCsEnterRoom());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ZtLiveCsEnterRoom> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AcFunDanmu.ZtLiveInteractiveReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ZtLiveCsEnterRoom() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ZtLiveCsEnterRoom(ZtLiveCsEnterRoom other) : this() {
      isAuthor_ = other.isAuthor_;
      reconnectCount_ = other.reconnectCount_;
      lastErrorCode_ = other.lastErrorCode_;
      enterRoomAttach_ = other.enterRoomAttach_;
      clientLiveSdkVersion_ = other.clientLiveSdkVersion_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ZtLiveCsEnterRoom Clone() {
      return new ZtLiveCsEnterRoom(this);
    }

    /// <summary>Field number for the "isAuthor" field.</summary>
    public const int IsAuthorFieldNumber = 1;
    private bool isAuthor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsAuthor {
      get { return isAuthor_; }
      set {
        isAuthor_ = value;
      }
    }

    /// <summary>Field number for the "reconnectCount" field.</summary>
    public const int ReconnectCountFieldNumber = 2;
    private int reconnectCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReconnectCount {
      get { return reconnectCount_; }
      set {
        reconnectCount_ = value;
      }
    }

    /// <summary>Field number for the "lastErrorCode" field.</summary>
    public const int LastErrorCodeFieldNumber = 3;
    private int lastErrorCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LastErrorCode {
      get { return lastErrorCode_; }
      set {
        lastErrorCode_ = value;
      }
    }

    /// <summary>Field number for the "enterRoomAttach" field.</summary>
    public const int EnterRoomAttachFieldNumber = 4;
    private string enterRoomAttach_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EnterRoomAttach {
      get { return enterRoomAttach_; }
      set {
        enterRoomAttach_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "clientLiveSdkVersion" field.</summary>
    public const int ClientLiveSdkVersionFieldNumber = 5;
    private string clientLiveSdkVersion_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClientLiveSdkVersion {
      get { return clientLiveSdkVersion_; }
      set {
        clientLiveSdkVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ZtLiveCsEnterRoom);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ZtLiveCsEnterRoom other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsAuthor != other.IsAuthor) return false;
      if (ReconnectCount != other.ReconnectCount) return false;
      if (LastErrorCode != other.LastErrorCode) return false;
      if (EnterRoomAttach != other.EnterRoomAttach) return false;
      if (ClientLiveSdkVersion != other.ClientLiveSdkVersion) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IsAuthor != false) hash ^= IsAuthor.GetHashCode();
      if (ReconnectCount != 0) hash ^= ReconnectCount.GetHashCode();
      if (LastErrorCode != 0) hash ^= LastErrorCode.GetHashCode();
      if (EnterRoomAttach.Length != 0) hash ^= EnterRoomAttach.GetHashCode();
      if (ClientLiveSdkVersion.Length != 0) hash ^= ClientLiveSdkVersion.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IsAuthor != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsAuthor);
      }
      if (ReconnectCount != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ReconnectCount);
      }
      if (LastErrorCode != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(LastErrorCode);
      }
      if (EnterRoomAttach.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(EnterRoomAttach);
      }
      if (ClientLiveSdkVersion.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(ClientLiveSdkVersion);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IsAuthor != false) {
        size += 1 + 1;
      }
      if (ReconnectCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReconnectCount);
      }
      if (LastErrorCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LastErrorCode);
      }
      if (EnterRoomAttach.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EnterRoomAttach);
      }
      if (ClientLiveSdkVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientLiveSdkVersion);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ZtLiveCsEnterRoom other) {
      if (other == null) {
        return;
      }
      if (other.IsAuthor != false) {
        IsAuthor = other.IsAuthor;
      }
      if (other.ReconnectCount != 0) {
        ReconnectCount = other.ReconnectCount;
      }
      if (other.LastErrorCode != 0) {
        LastErrorCode = other.LastErrorCode;
      }
      if (other.EnterRoomAttach.Length != 0) {
        EnterRoomAttach = other.EnterRoomAttach;
      }
      if (other.ClientLiveSdkVersion.Length != 0) {
        ClientLiveSdkVersion = other.ClientLiveSdkVersion;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            IsAuthor = input.ReadBool();
            break;
          }
          case 16: {
            ReconnectCount = input.ReadInt32();
            break;
          }
          case 24: {
            LastErrorCode = input.ReadInt32();
            break;
          }
          case 34: {
            EnterRoomAttach = input.ReadString();
            break;
          }
          case 42: {
            ClientLiveSdkVersion = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ZtLiveCsEnterRoomAck : pb::IMessage<ZtLiveCsEnterRoomAck> {
    private static readonly pb::MessageParser<ZtLiveCsEnterRoomAck> _parser = new pb::MessageParser<ZtLiveCsEnterRoomAck>(() => new ZtLiveCsEnterRoomAck());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ZtLiveCsEnterRoomAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AcFunDanmu.ZtLiveInteractiveReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ZtLiveCsEnterRoomAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ZtLiveCsEnterRoomAck(ZtLiveCsEnterRoomAck other) : this() {
      heartbeatIntervalMs_ = other.heartbeatIntervalMs_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ZtLiveCsEnterRoomAck Clone() {
      return new ZtLiveCsEnterRoomAck(this);
    }

    /// <summary>Field number for the "heartbeatIntervalMs" field.</summary>
    public const int HeartbeatIntervalMsFieldNumber = 1;
    private long heartbeatIntervalMs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long HeartbeatIntervalMs {
      get { return heartbeatIntervalMs_; }
      set {
        heartbeatIntervalMs_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ZtLiveCsEnterRoomAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ZtLiveCsEnterRoomAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (HeartbeatIntervalMs != other.HeartbeatIntervalMs) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HeartbeatIntervalMs != 0L) hash ^= HeartbeatIntervalMs.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HeartbeatIntervalMs != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(HeartbeatIntervalMs);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HeartbeatIntervalMs != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(HeartbeatIntervalMs);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ZtLiveCsEnterRoomAck other) {
      if (other == null) {
        return;
      }
      if (other.HeartbeatIntervalMs != 0L) {
        HeartbeatIntervalMs = other.HeartbeatIntervalMs;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            HeartbeatIntervalMs = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ZtLiveCsUserExit : pb::IMessage<ZtLiveCsUserExit> {
    private static readonly pb::MessageParser<ZtLiveCsUserExit> _parser = new pb::MessageParser<ZtLiveCsUserExit>(() => new ZtLiveCsUserExit());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ZtLiveCsUserExit> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AcFunDanmu.ZtLiveInteractiveReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ZtLiveCsUserExit() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ZtLiveCsUserExit(ZtLiveCsUserExit other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ZtLiveCsUserExit Clone() {
      return new ZtLiveCsUserExit(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ZtLiveCsUserExit);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ZtLiveCsUserExit other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ZtLiveCsUserExit other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class ZtLiveCsUserExitAck : pb::IMessage<ZtLiveCsUserExitAck> {
    private static readonly pb::MessageParser<ZtLiveCsUserExitAck> _parser = new pb::MessageParser<ZtLiveCsUserExitAck>(() => new ZtLiveCsUserExitAck());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ZtLiveCsUserExitAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AcFunDanmu.ZtLiveInteractiveReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ZtLiveCsUserExitAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ZtLiveCsUserExitAck(ZtLiveCsUserExitAck other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ZtLiveCsUserExitAck Clone() {
      return new ZtLiveCsUserExitAck(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ZtLiveCsUserExitAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ZtLiveCsUserExitAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ZtLiveCsUserExitAck other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class ZtLiveCsHeartbeat : pb::IMessage<ZtLiveCsHeartbeat> {
    private static readonly pb::MessageParser<ZtLiveCsHeartbeat> _parser = new pb::MessageParser<ZtLiveCsHeartbeat>(() => new ZtLiveCsHeartbeat());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ZtLiveCsHeartbeat> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AcFunDanmu.ZtLiveInteractiveReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ZtLiveCsHeartbeat() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ZtLiveCsHeartbeat(ZtLiveCsHeartbeat other) : this() {
      clientTimestampMs_ = other.clientTimestampMs_;
      sequence_ = other.sequence_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ZtLiveCsHeartbeat Clone() {
      return new ZtLiveCsHeartbeat(this);
    }

    /// <summary>Field number for the "clientTimestampMs" field.</summary>
    public const int ClientTimestampMsFieldNumber = 1;
    private long clientTimestampMs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ClientTimestampMs {
      get { return clientTimestampMs_; }
      set {
        clientTimestampMs_ = value;
      }
    }

    /// <summary>Field number for the "sequence" field.</summary>
    public const int SequenceFieldNumber = 2;
    private long sequence_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Sequence {
      get { return sequence_; }
      set {
        sequence_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ZtLiveCsHeartbeat);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ZtLiveCsHeartbeat other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClientTimestampMs != other.ClientTimestampMs) return false;
      if (Sequence != other.Sequence) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ClientTimestampMs != 0L) hash ^= ClientTimestampMs.GetHashCode();
      if (Sequence != 0L) hash ^= Sequence.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ClientTimestampMs != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(ClientTimestampMs);
      }
      if (Sequence != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Sequence);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClientTimestampMs != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ClientTimestampMs);
      }
      if (Sequence != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Sequence);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ZtLiveCsHeartbeat other) {
      if (other == null) {
        return;
      }
      if (other.ClientTimestampMs != 0L) {
        ClientTimestampMs = other.ClientTimestampMs;
      }
      if (other.Sequence != 0L) {
        Sequence = other.Sequence;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ClientTimestampMs = input.ReadInt64();
            break;
          }
          case 16: {
            Sequence = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ZtLiveCsHeartbeatAck : pb::IMessage<ZtLiveCsHeartbeatAck> {
    private static readonly pb::MessageParser<ZtLiveCsHeartbeatAck> _parser = new pb::MessageParser<ZtLiveCsHeartbeatAck>(() => new ZtLiveCsHeartbeatAck());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ZtLiveCsHeartbeatAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AcFunDanmu.ZtLiveInteractiveReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ZtLiveCsHeartbeatAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ZtLiveCsHeartbeatAck(ZtLiveCsHeartbeatAck other) : this() {
      serverTimestampMs_ = other.serverTimestampMs_;
      clientTimestampMs_ = other.clientTimestampMs_;
      clientSequence_ = other.clientSequence_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ZtLiveCsHeartbeatAck Clone() {
      return new ZtLiveCsHeartbeatAck(this);
    }

    /// <summary>Field number for the "serverTimestampMs" field.</summary>
    public const int ServerTimestampMsFieldNumber = 1;
    private long serverTimestampMs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ServerTimestampMs {
      get { return serverTimestampMs_; }
      set {
        serverTimestampMs_ = value;
      }
    }

    /// <summary>Field number for the "clientTimestampMs" field.</summary>
    public const int ClientTimestampMsFieldNumber = 2;
    private long clientTimestampMs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ClientTimestampMs {
      get { return clientTimestampMs_; }
      set {
        clientTimestampMs_ = value;
      }
    }

    /// <summary>Field number for the "clientSequence" field.</summary>
    public const int ClientSequenceFieldNumber = 3;
    private long clientSequence_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ClientSequence {
      get { return clientSequence_; }
      set {
        clientSequence_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ZtLiveCsHeartbeatAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ZtLiveCsHeartbeatAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ServerTimestampMs != other.ServerTimestampMs) return false;
      if (ClientTimestampMs != other.ClientTimestampMs) return false;
      if (ClientSequence != other.ClientSequence) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ServerTimestampMs != 0L) hash ^= ServerTimestampMs.GetHashCode();
      if (ClientTimestampMs != 0L) hash ^= ClientTimestampMs.GetHashCode();
      if (ClientSequence != 0L) hash ^= ClientSequence.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ServerTimestampMs != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(ServerTimestampMs);
      }
      if (ClientTimestampMs != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(ClientTimestampMs);
      }
      if (ClientSequence != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(ClientSequence);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ServerTimestampMs != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ServerTimestampMs);
      }
      if (ClientTimestampMs != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ClientTimestampMs);
      }
      if (ClientSequence != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ClientSequence);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ZtLiveCsHeartbeatAck other) {
      if (other == null) {
        return;
      }
      if (other.ServerTimestampMs != 0L) {
        ServerTimestampMs = other.ServerTimestampMs;
      }
      if (other.ClientTimestampMs != 0L) {
        ClientTimestampMs = other.ClientTimestampMs;
      }
      if (other.ClientSequence != 0L) {
        ClientSequence = other.ClientSequence;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ServerTimestampMs = input.ReadInt64();
            break;
          }
          case 16: {
            ClientTimestampMs = input.ReadInt64();
            break;
          }
          case 24: {
            ClientSequence = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ZtLiveScMessage : pb::IMessage<ZtLiveScMessage> {
    private static readonly pb::MessageParser<ZtLiveScMessage> _parser = new pb::MessageParser<ZtLiveScMessage>(() => new ZtLiveScMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ZtLiveScMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AcFunDanmu.ZtLiveInteractiveReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ZtLiveScMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ZtLiveScMessage(ZtLiveScMessage other) : this() {
      messageType_ = other.messageType_;
      compressionType_ = other.compressionType_;
      payload_ = other.payload_;
      liveId_ = other.liveId_;
      ticket_ = other.ticket_;
      serverTimestampMs_ = other.serverTimestampMs_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ZtLiveScMessage Clone() {
      return new ZtLiveScMessage(this);
    }

    /// <summary>Field number for the "messageType" field.</summary>
    public const int MessageTypeFieldNumber = 1;
    private string messageType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MessageType {
      get { return messageType_; }
      set {
        messageType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "compressionType" field.</summary>
    public const int CompressionTypeFieldNumber = 2;
    private global::AcFunDanmu.ZtLiveScMessage.Types.CompressionType compressionType_ = global::AcFunDanmu.ZtLiveScMessage.Types.CompressionType.Unknown;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AcFunDanmu.ZtLiveScMessage.Types.CompressionType CompressionType {
      get { return compressionType_; }
      set {
        compressionType_ = value;
      }
    }

    /// <summary>Field number for the "payload" field.</summary>
    public const int PayloadFieldNumber = 3;
    private pb::ByteString payload_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Payload {
      get { return payload_; }
      set {
        payload_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "liveId" field.</summary>
    public const int LiveIdFieldNumber = 4;
    private string liveId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LiveId {
      get { return liveId_; }
      set {
        liveId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ticket" field.</summary>
    public const int TicketFieldNumber = 5;
    private string ticket_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Ticket {
      get { return ticket_; }
      set {
        ticket_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "serverTimestampMs" field.</summary>
    public const int ServerTimestampMsFieldNumber = 6;
    private long serverTimestampMs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ServerTimestampMs {
      get { return serverTimestampMs_; }
      set {
        serverTimestampMs_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ZtLiveScMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ZtLiveScMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MessageType != other.MessageType) return false;
      if (CompressionType != other.CompressionType) return false;
      if (Payload != other.Payload) return false;
      if (LiveId != other.LiveId) return false;
      if (Ticket != other.Ticket) return false;
      if (ServerTimestampMs != other.ServerTimestampMs) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MessageType.Length != 0) hash ^= MessageType.GetHashCode();
      if (CompressionType != global::AcFunDanmu.ZtLiveScMessage.Types.CompressionType.Unknown) hash ^= CompressionType.GetHashCode();
      if (Payload.Length != 0) hash ^= Payload.GetHashCode();
      if (LiveId.Length != 0) hash ^= LiveId.GetHashCode();
      if (Ticket.Length != 0) hash ^= Ticket.GetHashCode();
      if (ServerTimestampMs != 0L) hash ^= ServerTimestampMs.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MessageType.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(MessageType);
      }
      if (CompressionType != global::AcFunDanmu.ZtLiveScMessage.Types.CompressionType.Unknown) {
        output.WriteRawTag(16);
        output.WriteEnum((int) CompressionType);
      }
      if (Payload.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(Payload);
      }
      if (LiveId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(LiveId);
      }
      if (Ticket.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Ticket);
      }
      if (ServerTimestampMs != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(ServerTimestampMs);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MessageType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MessageType);
      }
      if (CompressionType != global::AcFunDanmu.ZtLiveScMessage.Types.CompressionType.Unknown) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CompressionType);
      }
      if (Payload.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Payload);
      }
      if (LiveId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LiveId);
      }
      if (Ticket.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Ticket);
      }
      if (ServerTimestampMs != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ServerTimestampMs);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ZtLiveScMessage other) {
      if (other == null) {
        return;
      }
      if (other.MessageType.Length != 0) {
        MessageType = other.MessageType;
      }
      if (other.CompressionType != global::AcFunDanmu.ZtLiveScMessage.Types.CompressionType.Unknown) {
        CompressionType = other.CompressionType;
      }
      if (other.Payload.Length != 0) {
        Payload = other.Payload;
      }
      if (other.LiveId.Length != 0) {
        LiveId = other.LiveId;
      }
      if (other.Ticket.Length != 0) {
        Ticket = other.Ticket;
      }
      if (other.ServerTimestampMs != 0L) {
        ServerTimestampMs = other.ServerTimestampMs;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            MessageType = input.ReadString();
            break;
          }
          case 16: {
            CompressionType = (global::AcFunDanmu.ZtLiveScMessage.Types.CompressionType) input.ReadEnum();
            break;
          }
          case 26: {
            Payload = input.ReadBytes();
            break;
          }
          case 34: {
            LiveId = input.ReadString();
            break;
          }
          case 42: {
            Ticket = input.ReadString();
            break;
          }
          case 48: {
            ServerTimestampMs = input.ReadInt64();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ZtLiveScMessage message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum CompressionType {
        [pbr::OriginalName("UNKNOWN")] Unknown = 0,
        [pbr::OriginalName("NONE")] None = 1,
        [pbr::OriginalName("GZIP")] Gzip = 2,
      }

    }
    #endregion

  }

  public sealed partial class ZtLiveActionSignalItem : pb::IMessage<ZtLiveActionSignalItem> {
    private static readonly pb::MessageParser<ZtLiveActionSignalItem> _parser = new pb::MessageParser<ZtLiveActionSignalItem>(() => new ZtLiveActionSignalItem());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ZtLiveActionSignalItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AcFunDanmu.ZtLiveInteractiveReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ZtLiveActionSignalItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ZtLiveActionSignalItem(ZtLiveActionSignalItem other) : this() {
      singalType_ = other.singalType_;
      payload_ = other.payload_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ZtLiveActionSignalItem Clone() {
      return new ZtLiveActionSignalItem(this);
    }

    /// <summary>Field number for the "singalType" field.</summary>
    public const int SingalTypeFieldNumber = 1;
    private string singalType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SingalType {
      get { return singalType_; }
      set {
        singalType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "payload" field.</summary>
    public const int PayloadFieldNumber = 2;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_payload_codec
        = pb::FieldCodec.ForBytes(18);
    private readonly pbc::RepeatedField<pb::ByteString> payload_ = new pbc::RepeatedField<pb::ByteString>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<pb::ByteString> Payload {
      get { return payload_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ZtLiveActionSignalItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ZtLiveActionSignalItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SingalType != other.SingalType) return false;
      if(!payload_.Equals(other.payload_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SingalType.Length != 0) hash ^= SingalType.GetHashCode();
      hash ^= payload_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SingalType.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SingalType);
      }
      payload_.WriteTo(output, _repeated_payload_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SingalType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SingalType);
      }
      size += payload_.CalculateSize(_repeated_payload_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ZtLiveActionSignalItem other) {
      if (other == null) {
        return;
      }
      if (other.SingalType.Length != 0) {
        SingalType = other.SingalType;
      }
      payload_.Add(other.payload_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            SingalType = input.ReadString();
            break;
          }
          case 18: {
            payload_.AddEntriesFrom(input, _repeated_payload_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ZtLiveScActionSignal : pb::IMessage<ZtLiveScActionSignal> {
    private static readonly pb::MessageParser<ZtLiveScActionSignal> _parser = new pb::MessageParser<ZtLiveScActionSignal>(() => new ZtLiveScActionSignal());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ZtLiveScActionSignal> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AcFunDanmu.ZtLiveInteractiveReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ZtLiveScActionSignal() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ZtLiveScActionSignal(ZtLiveScActionSignal other) : this() {
      item_ = other.item_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ZtLiveScActionSignal Clone() {
      return new ZtLiveScActionSignal(this);
    }

    /// <summary>Field number for the "item" field.</summary>
    public const int ItemFieldNumber = 1;
    private static readonly pb::FieldCodec<global::AcFunDanmu.ZtLiveActionSignalItem> _repeated_item_codec
        = pb::FieldCodec.ForMessage(10, global::AcFunDanmu.ZtLiveActionSignalItem.Parser);
    private readonly pbc::RepeatedField<global::AcFunDanmu.ZtLiveActionSignalItem> item_ = new pbc::RepeatedField<global::AcFunDanmu.ZtLiveActionSignalItem>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AcFunDanmu.ZtLiveActionSignalItem> Item {
      get { return item_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ZtLiveScActionSignal);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ZtLiveScActionSignal other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!item_.Equals(other.item_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= item_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      item_.WriteTo(output, _repeated_item_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += item_.CalculateSize(_repeated_item_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ZtLiveScActionSignal other) {
      if (other == null) {
        return;
      }
      item_.Add(other.item_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            item_.AddEntriesFrom(input, _repeated_item_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ZtLiveStateSignalItem : pb::IMessage<ZtLiveStateSignalItem> {
    private static readonly pb::MessageParser<ZtLiveStateSignalItem> _parser = new pb::MessageParser<ZtLiveStateSignalItem>(() => new ZtLiveStateSignalItem());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ZtLiveStateSignalItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AcFunDanmu.ZtLiveInteractiveReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ZtLiveStateSignalItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ZtLiveStateSignalItem(ZtLiveStateSignalItem other) : this() {
      singalType_ = other.singalType_;
      payload_ = other.payload_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ZtLiveStateSignalItem Clone() {
      return new ZtLiveStateSignalItem(this);
    }

    /// <summary>Field number for the "singalType" field.</summary>
    public const int SingalTypeFieldNumber = 1;
    private string singalType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SingalType {
      get { return singalType_; }
      set {
        singalType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "payload" field.</summary>
    public const int PayloadFieldNumber = 2;
    private pb::ByteString payload_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Payload {
      get { return payload_; }
      set {
        payload_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ZtLiveStateSignalItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ZtLiveStateSignalItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SingalType != other.SingalType) return false;
      if (Payload != other.Payload) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SingalType.Length != 0) hash ^= SingalType.GetHashCode();
      if (Payload.Length != 0) hash ^= Payload.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SingalType.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SingalType);
      }
      if (Payload.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Payload);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SingalType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SingalType);
      }
      if (Payload.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Payload);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ZtLiveStateSignalItem other) {
      if (other == null) {
        return;
      }
      if (other.SingalType.Length != 0) {
        SingalType = other.SingalType;
      }
      if (other.Payload.Length != 0) {
        Payload = other.Payload;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            SingalType = input.ReadString();
            break;
          }
          case 18: {
            Payload = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ZtLiveScStateSignal : pb::IMessage<ZtLiveScStateSignal> {
    private static readonly pb::MessageParser<ZtLiveScStateSignal> _parser = new pb::MessageParser<ZtLiveScStateSignal>(() => new ZtLiveScStateSignal());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ZtLiveScStateSignal> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AcFunDanmu.ZtLiveInteractiveReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ZtLiveScStateSignal() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ZtLiveScStateSignal(ZtLiveScStateSignal other) : this() {
      item_ = other.item_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ZtLiveScStateSignal Clone() {
      return new ZtLiveScStateSignal(this);
    }

    /// <summary>Field number for the "item" field.</summary>
    public const int ItemFieldNumber = 1;
    private static readonly pb::FieldCodec<global::AcFunDanmu.ZtLiveStateSignalItem> _repeated_item_codec
        = pb::FieldCodec.ForMessage(10, global::AcFunDanmu.ZtLiveStateSignalItem.Parser);
    private readonly pbc::RepeatedField<global::AcFunDanmu.ZtLiveStateSignalItem> item_ = new pbc::RepeatedField<global::AcFunDanmu.ZtLiveStateSignalItem>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AcFunDanmu.ZtLiveStateSignalItem> Item {
      get { return item_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ZtLiveScStateSignal);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ZtLiveScStateSignal other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!item_.Equals(other.item_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= item_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      item_.WriteTo(output, _repeated_item_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += item_.CalculateSize(_repeated_item_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ZtLiveScStateSignal other) {
      if (other == null) {
        return;
      }
      item_.Add(other.item_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            item_.AddEntriesFrom(input, _repeated_item_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ZtLiveNotifySignalItem : pb::IMessage<ZtLiveNotifySignalItem> {
    private static readonly pb::MessageParser<ZtLiveNotifySignalItem> _parser = new pb::MessageParser<ZtLiveNotifySignalItem>(() => new ZtLiveNotifySignalItem());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ZtLiveNotifySignalItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AcFunDanmu.ZtLiveInteractiveReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ZtLiveNotifySignalItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ZtLiveNotifySignalItem(ZtLiveNotifySignalItem other) : this() {
      signalType_ = other.signalType_;
      payload_ = other.payload_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ZtLiveNotifySignalItem Clone() {
      return new ZtLiveNotifySignalItem(this);
    }

    /// <summary>Field number for the "signalType" field.</summary>
    public const int SignalTypeFieldNumber = 1;
    private string signalType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SignalType {
      get { return signalType_; }
      set {
        signalType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "payload" field.</summary>
    public const int PayloadFieldNumber = 2;
    private pb::ByteString payload_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Payload {
      get { return payload_; }
      set {
        payload_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ZtLiveNotifySignalItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ZtLiveNotifySignalItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SignalType != other.SignalType) return false;
      if (Payload != other.Payload) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SignalType.Length != 0) hash ^= SignalType.GetHashCode();
      if (Payload.Length != 0) hash ^= Payload.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SignalType.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SignalType);
      }
      if (Payload.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Payload);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SignalType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SignalType);
      }
      if (Payload.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Payload);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ZtLiveNotifySignalItem other) {
      if (other == null) {
        return;
      }
      if (other.SignalType.Length != 0) {
        SignalType = other.SignalType;
      }
      if (other.Payload.Length != 0) {
        Payload = other.Payload;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            SignalType = input.ReadString();
            break;
          }
          case 18: {
            Payload = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ZtLiveScNotifySignal : pb::IMessage<ZtLiveScNotifySignal> {
    private static readonly pb::MessageParser<ZtLiveScNotifySignal> _parser = new pb::MessageParser<ZtLiveScNotifySignal>(() => new ZtLiveScNotifySignal());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ZtLiveScNotifySignal> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AcFunDanmu.ZtLiveInteractiveReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ZtLiveScNotifySignal() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ZtLiveScNotifySignal(ZtLiveScNotifySignal other) : this() {
      item_ = other.item_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ZtLiveScNotifySignal Clone() {
      return new ZtLiveScNotifySignal(this);
    }

    /// <summary>Field number for the "item" field.</summary>
    public const int ItemFieldNumber = 1;
    private static readonly pb::FieldCodec<global::AcFunDanmu.ZtLiveNotifySignalItem> _repeated_item_codec
        = pb::FieldCodec.ForMessage(10, global::AcFunDanmu.ZtLiveNotifySignalItem.Parser);
    private readonly pbc::RepeatedField<global::AcFunDanmu.ZtLiveNotifySignalItem> item_ = new pbc::RepeatedField<global::AcFunDanmu.ZtLiveNotifySignalItem>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AcFunDanmu.ZtLiveNotifySignalItem> Item {
      get { return item_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ZtLiveScNotifySignal);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ZtLiveScNotifySignal other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!item_.Equals(other.item_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= item_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      item_.WriteTo(output, _repeated_item_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += item_.CalculateSize(_repeated_item_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ZtLiveScNotifySignal other) {
      if (other == null) {
        return;
      }
      item_.Add(other.item_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            item_.AddEntriesFrom(input, _repeated_item_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ZtLiveScStatusChanged : pb::IMessage<ZtLiveScStatusChanged> {
    private static readonly pb::MessageParser<ZtLiveScStatusChanged> _parser = new pb::MessageParser<ZtLiveScStatusChanged>(() => new ZtLiveScStatusChanged());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ZtLiveScStatusChanged> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AcFunDanmu.ZtLiveInteractiveReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ZtLiveScStatusChanged() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ZtLiveScStatusChanged(ZtLiveScStatusChanged other) : this() {
      type_ = other.type_;
      maxRandomDelayMs_ = other.maxRandomDelayMs_;
      bannedInfo_ = other.bannedInfo_ != null ? other.bannedInfo_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ZtLiveScStatusChanged Clone() {
      return new ZtLiveScStatusChanged(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::AcFunDanmu.ZtLiveScStatusChanged.Types.Type type_ = global::AcFunDanmu.ZtLiveScStatusChanged.Types.Type.Unknown;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AcFunDanmu.ZtLiveScStatusChanged.Types.Type Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "maxRandomDelayMs" field.</summary>
    public const int MaxRandomDelayMsFieldNumber = 2;
    private long maxRandomDelayMs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MaxRandomDelayMs {
      get { return maxRandomDelayMs_; }
      set {
        maxRandomDelayMs_ = value;
      }
    }

    /// <summary>Field number for the "bannedInfo" field.</summary>
    public const int BannedInfoFieldNumber = 3;
    private global::AcFunDanmu.ZtLiveScStatusChanged.Types.BannedInfo bannedInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AcFunDanmu.ZtLiveScStatusChanged.Types.BannedInfo BannedInfo {
      get { return bannedInfo_; }
      set {
        bannedInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ZtLiveScStatusChanged);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ZtLiveScStatusChanged other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (MaxRandomDelayMs != other.MaxRandomDelayMs) return false;
      if (!object.Equals(BannedInfo, other.BannedInfo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != global::AcFunDanmu.ZtLiveScStatusChanged.Types.Type.Unknown) hash ^= Type.GetHashCode();
      if (MaxRandomDelayMs != 0L) hash ^= MaxRandomDelayMs.GetHashCode();
      if (bannedInfo_ != null) hash ^= BannedInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != global::AcFunDanmu.ZtLiveScStatusChanged.Types.Type.Unknown) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (MaxRandomDelayMs != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(MaxRandomDelayMs);
      }
      if (bannedInfo_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(BannedInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != global::AcFunDanmu.ZtLiveScStatusChanged.Types.Type.Unknown) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (MaxRandomDelayMs != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MaxRandomDelayMs);
      }
      if (bannedInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BannedInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ZtLiveScStatusChanged other) {
      if (other == null) {
        return;
      }
      if (other.Type != global::AcFunDanmu.ZtLiveScStatusChanged.Types.Type.Unknown) {
        Type = other.Type;
      }
      if (other.MaxRandomDelayMs != 0L) {
        MaxRandomDelayMs = other.MaxRandomDelayMs;
      }
      if (other.bannedInfo_ != null) {
        if (bannedInfo_ == null) {
          BannedInfo = new global::AcFunDanmu.ZtLiveScStatusChanged.Types.BannedInfo();
        }
        BannedInfo.MergeFrom(other.BannedInfo);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Type = (global::AcFunDanmu.ZtLiveScStatusChanged.Types.Type) input.ReadEnum();
            break;
          }
          case 16: {
            MaxRandomDelayMs = input.ReadInt64();
            break;
          }
          case 26: {
            if (bannedInfo_ == null) {
              BannedInfo = new global::AcFunDanmu.ZtLiveScStatusChanged.Types.BannedInfo();
            }
            input.ReadMessage(BannedInfo);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ZtLiveScStatusChanged message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Type {
        [pbr::OriginalName("UNKNOWN")] Unknown = 0,
        [pbr::OriginalName("LIVE_CLOSED")] LiveClosed = 1,
        [pbr::OriginalName("LIVE_REOPENED")] LiveReopened = 2,
        [pbr::OriginalName("LIVE_URL_CHANGED")] LiveUrlChanged = 3,
        [pbr::OriginalName("LIVE_BANNED")] LiveBanned = 4,
      }

      public sealed partial class BannedInfo : pb::IMessage<BannedInfo> {
        private static readonly pb::MessageParser<BannedInfo> _parser = new pb::MessageParser<BannedInfo>(() => new BannedInfo());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<BannedInfo> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::AcFunDanmu.ZtLiveScStatusChanged.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BannedInfo() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BannedInfo(BannedInfo other) : this() {
          banReason_ = other.banReason_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BannedInfo Clone() {
          return new BannedInfo(this);
        }

        /// <summary>Field number for the "banReason" field.</summary>
        public const int BanReasonFieldNumber = 1;
        private string banReason_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string BanReason {
          get { return banReason_; }
          set {
            banReason_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as BannedInfo);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(BannedInfo other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (BanReason != other.BanReason) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (BanReason.Length != 0) hash ^= BanReason.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (BanReason.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(BanReason);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (BanReason.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(BanReason);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(BannedInfo other) {
          if (other == null) {
            return;
          }
          if (other.BanReason.Length != 0) {
            BanReason = other.BanReason;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                BanReason = input.ReadString();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class ZtLiveScTicketInvalid : pb::IMessage<ZtLiveScTicketInvalid> {
    private static readonly pb::MessageParser<ZtLiveScTicketInvalid> _parser = new pb::MessageParser<ZtLiveScTicketInvalid>(() => new ZtLiveScTicketInvalid());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ZtLiveScTicketInvalid> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AcFunDanmu.ZtLiveInteractiveReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ZtLiveScTicketInvalid() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ZtLiveScTicketInvalid(ZtLiveScTicketInvalid other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ZtLiveScTicketInvalid Clone() {
      return new ZtLiveScTicketInvalid(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ZtLiveScTicketInvalid);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ZtLiveScTicketInvalid other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ZtLiveScTicketInvalid other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class ZtLiveUserInfo : pb::IMessage<ZtLiveUserInfo> {
    private static readonly pb::MessageParser<ZtLiveUserInfo> _parser = new pb::MessageParser<ZtLiveUserInfo>(() => new ZtLiveUserInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ZtLiveUserInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AcFunDanmu.ZtLiveInteractiveReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ZtLiveUserInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ZtLiveUserInfo(ZtLiveUserInfo other) : this() {
      userId_ = other.userId_;
      nickname_ = other.nickname_;
      avatar_ = other.avatar_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ZtLiveUserInfo Clone() {
      return new ZtLiveUserInfo(this);
    }

    /// <summary>Field number for the "userId" field.</summary>
    public const int UserIdFieldNumber = 1;
    private long userId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "nickname" field.</summary>
    public const int NicknameFieldNumber = 2;
    private string nickname_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Nickname {
      get { return nickname_; }
      set {
        nickname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "avatar" field.</summary>
    public const int AvatarFieldNumber = 3;
    private static readonly pb::FieldCodec<global::AcFunDanmu.ImageCdnNode> _repeated_avatar_codec
        = pb::FieldCodec.ForMessage(26, global::AcFunDanmu.ImageCdnNode.Parser);
    private readonly pbc::RepeatedField<global::AcFunDanmu.ImageCdnNode> avatar_ = new pbc::RepeatedField<global::AcFunDanmu.ImageCdnNode>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AcFunDanmu.ImageCdnNode> Avatar {
      get { return avatar_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ZtLiveUserInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ZtLiveUserInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (Nickname != other.Nickname) return false;
      if(!avatar_.Equals(other.avatar_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0L) hash ^= UserId.GetHashCode();
      if (Nickname.Length != 0) hash ^= Nickname.GetHashCode();
      hash ^= avatar_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UserId);
      }
      if (Nickname.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Nickname);
      }
      avatar_.WriteTo(output, _repeated_avatar_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      if (Nickname.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Nickname);
      }
      size += avatar_.CalculateSize(_repeated_avatar_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ZtLiveUserInfo other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0L) {
        UserId = other.UserId;
      }
      if (other.Nickname.Length != 0) {
        Nickname = other.Nickname;
      }
      avatar_.Add(other.avatar_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UserId = input.ReadInt64();
            break;
          }
          case 18: {
            Nickname = input.ReadString();
            break;
          }
          case 26: {
            avatar_.AddEntriesFrom(input, _repeated_avatar_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ImageCdnNode : pb::IMessage<ImageCdnNode> {
    private static readonly pb::MessageParser<ImageCdnNode> _parser = new pb::MessageParser<ImageCdnNode>(() => new ImageCdnNode());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ImageCdnNode> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AcFunDanmu.ZtLiveInteractiveReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImageCdnNode() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImageCdnNode(ImageCdnNode other) : this() {
      cdn_ = other.cdn_;
      url_ = other.url_;
      urlPattern_ = other.urlPattern_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImageCdnNode Clone() {
      return new ImageCdnNode(this);
    }

    /// <summary>Field number for the "cdn" field.</summary>
    public const int CdnFieldNumber = 1;
    private string cdn_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Cdn {
      get { return cdn_; }
      set {
        cdn_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "url" field.</summary>
    public const int UrlFieldNumber = 2;
    private string url_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Url {
      get { return url_; }
      set {
        url_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "urlPattern" field.</summary>
    public const int UrlPatternFieldNumber = 3;
    private string urlPattern_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UrlPattern {
      get { return urlPattern_; }
      set {
        urlPattern_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ImageCdnNode);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ImageCdnNode other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Cdn != other.Cdn) return false;
      if (Url != other.Url) return false;
      if (UrlPattern != other.UrlPattern) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Cdn.Length != 0) hash ^= Cdn.GetHashCode();
      if (Url.Length != 0) hash ^= Url.GetHashCode();
      if (UrlPattern.Length != 0) hash ^= UrlPattern.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Cdn.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Cdn);
      }
      if (Url.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Url);
      }
      if (UrlPattern.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(UrlPattern);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Cdn.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Cdn);
      }
      if (Url.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Url);
      }
      if (UrlPattern.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UrlPattern);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ImageCdnNode other) {
      if (other == null) {
        return;
      }
      if (other.Cdn.Length != 0) {
        Cdn = other.Cdn;
      }
      if (other.Url.Length != 0) {
        Url = other.Url;
      }
      if (other.UrlPattern.Length != 0) {
        UrlPattern = other.UrlPattern;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Cdn = input.ReadString();
            break;
          }
          case 18: {
            Url = input.ReadString();
            break;
          }
          case 26: {
            UrlPattern = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CommonActionSignalComment : pb::IMessage<CommonActionSignalComment> {
    private static readonly pb::MessageParser<CommonActionSignalComment> _parser = new pb::MessageParser<CommonActionSignalComment>(() => new CommonActionSignalComment());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CommonActionSignalComment> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AcFunDanmu.ZtLiveInteractiveReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommonActionSignalComment() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommonActionSignalComment(CommonActionSignalComment other) : this() {
      content_ = other.content_;
      sendTimeMs_ = other.sendTimeMs_;
      userInfo_ = other.userInfo_ != null ? other.userInfo_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommonActionSignalComment Clone() {
      return new CommonActionSignalComment(this);
    }

    /// <summary>Field number for the "content" field.</summary>
    public const int ContentFieldNumber = 1;
    private string content_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Content {
      get { return content_; }
      set {
        content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sendTimeMs" field.</summary>
    public const int SendTimeMsFieldNumber = 2;
    private long sendTimeMs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SendTimeMs {
      get { return sendTimeMs_; }
      set {
        sendTimeMs_ = value;
      }
    }

    /// <summary>Field number for the "userInfo" field.</summary>
    public const int UserInfoFieldNumber = 3;
    private global::AcFunDanmu.ZtLiveUserInfo userInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AcFunDanmu.ZtLiveUserInfo UserInfo {
      get { return userInfo_; }
      set {
        userInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CommonActionSignalComment);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CommonActionSignalComment other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Content != other.Content) return false;
      if (SendTimeMs != other.SendTimeMs) return false;
      if (!object.Equals(UserInfo, other.UserInfo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Content.Length != 0) hash ^= Content.GetHashCode();
      if (SendTimeMs != 0L) hash ^= SendTimeMs.GetHashCode();
      if (userInfo_ != null) hash ^= UserInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Content.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Content);
      }
      if (SendTimeMs != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(SendTimeMs);
      }
      if (userInfo_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(UserInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Content.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Content);
      }
      if (SendTimeMs != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SendTimeMs);
      }
      if (userInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CommonActionSignalComment other) {
      if (other == null) {
        return;
      }
      if (other.Content.Length != 0) {
        Content = other.Content;
      }
      if (other.SendTimeMs != 0L) {
        SendTimeMs = other.SendTimeMs;
      }
      if (other.userInfo_ != null) {
        if (userInfo_ == null) {
          UserInfo = new global::AcFunDanmu.ZtLiveUserInfo();
        }
        UserInfo.MergeFrom(other.UserInfo);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Content = input.ReadString();
            break;
          }
          case 16: {
            SendTimeMs = input.ReadInt64();
            break;
          }
          case 26: {
            if (userInfo_ == null) {
              UserInfo = new global::AcFunDanmu.ZtLiveUserInfo();
            }
            input.ReadMessage(UserInfo);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CommonActionSignalLike : pb::IMessage<CommonActionSignalLike> {
    private static readonly pb::MessageParser<CommonActionSignalLike> _parser = new pb::MessageParser<CommonActionSignalLike>(() => new CommonActionSignalLike());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CommonActionSignalLike> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AcFunDanmu.ZtLiveInteractiveReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommonActionSignalLike() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommonActionSignalLike(CommonActionSignalLike other) : this() {
      userInfo_ = other.userInfo_ != null ? other.userInfo_.Clone() : null;
      sendTimeMs_ = other.sendTimeMs_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommonActionSignalLike Clone() {
      return new CommonActionSignalLike(this);
    }

    /// <summary>Field number for the "userInfo" field.</summary>
    public const int UserInfoFieldNumber = 1;
    private global::AcFunDanmu.ZtLiveUserInfo userInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AcFunDanmu.ZtLiveUserInfo UserInfo {
      get { return userInfo_; }
      set {
        userInfo_ = value;
      }
    }

    /// <summary>Field number for the "sendTimeMs" field.</summary>
    public const int SendTimeMsFieldNumber = 2;
    private long sendTimeMs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SendTimeMs {
      get { return sendTimeMs_; }
      set {
        sendTimeMs_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CommonActionSignalLike);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CommonActionSignalLike other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(UserInfo, other.UserInfo)) return false;
      if (SendTimeMs != other.SendTimeMs) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (userInfo_ != null) hash ^= UserInfo.GetHashCode();
      if (SendTimeMs != 0L) hash ^= SendTimeMs.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (userInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(UserInfo);
      }
      if (SendTimeMs != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(SendTimeMs);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (userInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserInfo);
      }
      if (SendTimeMs != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SendTimeMs);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CommonActionSignalLike other) {
      if (other == null) {
        return;
      }
      if (other.userInfo_ != null) {
        if (userInfo_ == null) {
          UserInfo = new global::AcFunDanmu.ZtLiveUserInfo();
        }
        UserInfo.MergeFrom(other.UserInfo);
      }
      if (other.SendTimeMs != 0L) {
        SendTimeMs = other.SendTimeMs;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (userInfo_ == null) {
              UserInfo = new global::AcFunDanmu.ZtLiveUserInfo();
            }
            input.ReadMessage(UserInfo);
            break;
          }
          case 16: {
            SendTimeMs = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CommonActionSignalUserEnterRoom : pb::IMessage<CommonActionSignalUserEnterRoom> {
    private static readonly pb::MessageParser<CommonActionSignalUserEnterRoom> _parser = new pb::MessageParser<CommonActionSignalUserEnterRoom>(() => new CommonActionSignalUserEnterRoom());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CommonActionSignalUserEnterRoom> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AcFunDanmu.ZtLiveInteractiveReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommonActionSignalUserEnterRoom() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommonActionSignalUserEnterRoom(CommonActionSignalUserEnterRoom other) : this() {
      userInfo_ = other.userInfo_ != null ? other.userInfo_.Clone() : null;
      sendTimeMs_ = other.sendTimeMs_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommonActionSignalUserEnterRoom Clone() {
      return new CommonActionSignalUserEnterRoom(this);
    }

    /// <summary>Field number for the "userInfo" field.</summary>
    public const int UserInfoFieldNumber = 1;
    private global::AcFunDanmu.ZtLiveUserInfo userInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AcFunDanmu.ZtLiveUserInfo UserInfo {
      get { return userInfo_; }
      set {
        userInfo_ = value;
      }
    }

    /// <summary>Field number for the "sendTimeMs" field.</summary>
    public const int SendTimeMsFieldNumber = 2;
    private long sendTimeMs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SendTimeMs {
      get { return sendTimeMs_; }
      set {
        sendTimeMs_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CommonActionSignalUserEnterRoom);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CommonActionSignalUserEnterRoom other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(UserInfo, other.UserInfo)) return false;
      if (SendTimeMs != other.SendTimeMs) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (userInfo_ != null) hash ^= UserInfo.GetHashCode();
      if (SendTimeMs != 0L) hash ^= SendTimeMs.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (userInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(UserInfo);
      }
      if (SendTimeMs != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(SendTimeMs);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (userInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserInfo);
      }
      if (SendTimeMs != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SendTimeMs);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CommonActionSignalUserEnterRoom other) {
      if (other == null) {
        return;
      }
      if (other.userInfo_ != null) {
        if (userInfo_ == null) {
          UserInfo = new global::AcFunDanmu.ZtLiveUserInfo();
        }
        UserInfo.MergeFrom(other.UserInfo);
      }
      if (other.SendTimeMs != 0L) {
        SendTimeMs = other.SendTimeMs;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (userInfo_ == null) {
              UserInfo = new global::AcFunDanmu.ZtLiveUserInfo();
            }
            input.ReadMessage(UserInfo);
            break;
          }
          case 16: {
            SendTimeMs = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CommonActionSignalUserFollowAuthor : pb::IMessage<CommonActionSignalUserFollowAuthor> {
    private static readonly pb::MessageParser<CommonActionSignalUserFollowAuthor> _parser = new pb::MessageParser<CommonActionSignalUserFollowAuthor>(() => new CommonActionSignalUserFollowAuthor());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CommonActionSignalUserFollowAuthor> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AcFunDanmu.ZtLiveInteractiveReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommonActionSignalUserFollowAuthor() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommonActionSignalUserFollowAuthor(CommonActionSignalUserFollowAuthor other) : this() {
      userInfo_ = other.userInfo_ != null ? other.userInfo_.Clone() : null;
      sendTimeMs_ = other.sendTimeMs_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommonActionSignalUserFollowAuthor Clone() {
      return new CommonActionSignalUserFollowAuthor(this);
    }

    /// <summary>Field number for the "userInfo" field.</summary>
    public const int UserInfoFieldNumber = 1;
    private global::AcFunDanmu.ZtLiveUserInfo userInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AcFunDanmu.ZtLiveUserInfo UserInfo {
      get { return userInfo_; }
      set {
        userInfo_ = value;
      }
    }

    /// <summary>Field number for the "sendTimeMs" field.</summary>
    public const int SendTimeMsFieldNumber = 2;
    private long sendTimeMs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SendTimeMs {
      get { return sendTimeMs_; }
      set {
        sendTimeMs_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CommonActionSignalUserFollowAuthor);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CommonActionSignalUserFollowAuthor other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(UserInfo, other.UserInfo)) return false;
      if (SendTimeMs != other.SendTimeMs) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (userInfo_ != null) hash ^= UserInfo.GetHashCode();
      if (SendTimeMs != 0L) hash ^= SendTimeMs.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (userInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(UserInfo);
      }
      if (SendTimeMs != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(SendTimeMs);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (userInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserInfo);
      }
      if (SendTimeMs != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SendTimeMs);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CommonActionSignalUserFollowAuthor other) {
      if (other == null) {
        return;
      }
      if (other.userInfo_ != null) {
        if (userInfo_ == null) {
          UserInfo = new global::AcFunDanmu.ZtLiveUserInfo();
        }
        UserInfo.MergeFrom(other.UserInfo);
      }
      if (other.SendTimeMs != 0L) {
        SendTimeMs = other.SendTimeMs;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (userInfo_ == null) {
              UserInfo = new global::AcFunDanmu.ZtLiveUserInfo();
            }
            input.ReadMessage(UserInfo);
            break;
          }
          case 16: {
            SendTimeMs = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CommonActionSignalGift : pb::IMessage<CommonActionSignalGift> {
    private static readonly pb::MessageParser<CommonActionSignalGift> _parser = new pb::MessageParser<CommonActionSignalGift>(() => new CommonActionSignalGift());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CommonActionSignalGift> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AcFunDanmu.ZtLiveInteractiveReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommonActionSignalGift() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommonActionSignalGift(CommonActionSignalGift other) : this() {
      user_ = other.user_ != null ? other.user_.Clone() : null;
      sendTimeMs_ = other.sendTimeMs_;
      giftId_ = other.giftId_;
      count_ = other.count_;
      combo_ = other.combo_;
      value_ = other.value_;
      comboId_ = other.comboId_;
      slotDisplayDurationMs_ = other.slotDisplayDurationMs_;
      expireDurationMs_ = other.expireDurationMs_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommonActionSignalGift Clone() {
      return new CommonActionSignalGift(this);
    }

    /// <summary>Field number for the "user" field.</summary>
    public const int UserFieldNumber = 1;
    private global::AcFunDanmu.ZtLiveUserInfo user_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AcFunDanmu.ZtLiveUserInfo User {
      get { return user_; }
      set {
        user_ = value;
      }
    }

    /// <summary>Field number for the "sendTimeMs" field.</summary>
    public const int SendTimeMsFieldNumber = 2;
    private long sendTimeMs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SendTimeMs {
      get { return sendTimeMs_; }
      set {
        sendTimeMs_ = value;
      }
    }

    /// <summary>Field number for the "giftId" field.</summary>
    public const int GiftIdFieldNumber = 3;
    private int giftId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GiftId {
      get { return giftId_; }
      set {
        giftId_ = value;
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 4;
    private int count_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    /// <summary>Field number for the "combo" field.</summary>
    public const int ComboFieldNumber = 5;
    private int combo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Combo {
      get { return combo_; }
      set {
        combo_ = value;
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 6;
    private int value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    /// <summary>Field number for the "comboId" field.</summary>
    public const int ComboIdFieldNumber = 7;
    private string comboId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ComboId {
      get { return comboId_; }
      set {
        comboId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "slotDisplayDurationMs" field.</summary>
    public const int SlotDisplayDurationMsFieldNumber = 8;
    private int slotDisplayDurationMs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SlotDisplayDurationMs {
      get { return slotDisplayDurationMs_; }
      set {
        slotDisplayDurationMs_ = value;
      }
    }

    /// <summary>Field number for the "expireDurationMs" field.</summary>
    public const int ExpireDurationMsFieldNumber = 9;
    private int expireDurationMs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ExpireDurationMs {
      get { return expireDurationMs_; }
      set {
        expireDurationMs_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CommonActionSignalGift);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CommonActionSignalGift other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(User, other.User)) return false;
      if (SendTimeMs != other.SendTimeMs) return false;
      if (GiftId != other.GiftId) return false;
      if (Count != other.Count) return false;
      if (Combo != other.Combo) return false;
      if (Value != other.Value) return false;
      if (ComboId != other.ComboId) return false;
      if (SlotDisplayDurationMs != other.SlotDisplayDurationMs) return false;
      if (ExpireDurationMs != other.ExpireDurationMs) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (user_ != null) hash ^= User.GetHashCode();
      if (SendTimeMs != 0L) hash ^= SendTimeMs.GetHashCode();
      if (GiftId != 0) hash ^= GiftId.GetHashCode();
      if (Count != 0) hash ^= Count.GetHashCode();
      if (Combo != 0) hash ^= Combo.GetHashCode();
      if (Value != 0) hash ^= Value.GetHashCode();
      if (ComboId.Length != 0) hash ^= ComboId.GetHashCode();
      if (SlotDisplayDurationMs != 0) hash ^= SlotDisplayDurationMs.GetHashCode();
      if (ExpireDurationMs != 0) hash ^= ExpireDurationMs.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (user_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(User);
      }
      if (SendTimeMs != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(SendTimeMs);
      }
      if (GiftId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(GiftId);
      }
      if (Count != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Count);
      }
      if (Combo != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Combo);
      }
      if (Value != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Value);
      }
      if (ComboId.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(ComboId);
      }
      if (SlotDisplayDurationMs != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(SlotDisplayDurationMs);
      }
      if (ExpireDurationMs != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(ExpireDurationMs);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (user_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(User);
      }
      if (SendTimeMs != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SendTimeMs);
      }
      if (GiftId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GiftId);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      if (Combo != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Combo);
      }
      if (Value != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Value);
      }
      if (ComboId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ComboId);
      }
      if (SlotDisplayDurationMs != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SlotDisplayDurationMs);
      }
      if (ExpireDurationMs != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ExpireDurationMs);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CommonActionSignalGift other) {
      if (other == null) {
        return;
      }
      if (other.user_ != null) {
        if (user_ == null) {
          User = new global::AcFunDanmu.ZtLiveUserInfo();
        }
        User.MergeFrom(other.User);
      }
      if (other.SendTimeMs != 0L) {
        SendTimeMs = other.SendTimeMs;
      }
      if (other.GiftId != 0) {
        GiftId = other.GiftId;
      }
      if (other.Count != 0) {
        Count = other.Count;
      }
      if (other.Combo != 0) {
        Combo = other.Combo;
      }
      if (other.Value != 0) {
        Value = other.Value;
      }
      if (other.ComboId.Length != 0) {
        ComboId = other.ComboId;
      }
      if (other.SlotDisplayDurationMs != 0) {
        SlotDisplayDurationMs = other.SlotDisplayDurationMs;
      }
      if (other.ExpireDurationMs != 0) {
        ExpireDurationMs = other.ExpireDurationMs;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (user_ == null) {
              User = new global::AcFunDanmu.ZtLiveUserInfo();
            }
            input.ReadMessage(User);
            break;
          }
          case 16: {
            SendTimeMs = input.ReadInt64();
            break;
          }
          case 24: {
            GiftId = input.ReadInt32();
            break;
          }
          case 32: {
            Count = input.ReadInt32();
            break;
          }
          case 40: {
            Combo = input.ReadInt32();
            break;
          }
          case 48: {
            Value = input.ReadInt32();
            break;
          }
          case 58: {
            ComboId = input.ReadString();
            break;
          }
          case 64: {
            SlotDisplayDurationMs = input.ReadInt32();
            break;
          }
          case 72: {
            ExpireDurationMs = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CommonNotifySignalKickedOut : pb::IMessage<CommonNotifySignalKickedOut> {
    private static readonly pb::MessageParser<CommonNotifySignalKickedOut> _parser = new pb::MessageParser<CommonNotifySignalKickedOut>(() => new CommonNotifySignalKickedOut());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CommonNotifySignalKickedOut> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AcFunDanmu.ZtLiveInteractiveReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommonNotifySignalKickedOut() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommonNotifySignalKickedOut(CommonNotifySignalKickedOut other) : this() {
      reason_ = other.reason_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommonNotifySignalKickedOut Clone() {
      return new CommonNotifySignalKickedOut(this);
    }

    /// <summary>Field number for the "reason" field.</summary>
    public const int ReasonFieldNumber = 1;
    private string reason_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Reason {
      get { return reason_; }
      set {
        reason_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CommonNotifySignalKickedOut);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CommonNotifySignalKickedOut other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Reason != other.Reason) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Reason.Length != 0) hash ^= Reason.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Reason.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Reason);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Reason.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Reason);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CommonNotifySignalKickedOut other) {
      if (other == null) {
        return;
      }
      if (other.Reason.Length != 0) {
        Reason = other.Reason;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Reason = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CommonNotifySignalViolationAlert : pb::IMessage<CommonNotifySignalViolationAlert> {
    private static readonly pb::MessageParser<CommonNotifySignalViolationAlert> _parser = new pb::MessageParser<CommonNotifySignalViolationAlert>(() => new CommonNotifySignalViolationAlert());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CommonNotifySignalViolationAlert> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AcFunDanmu.ZtLiveInteractiveReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommonNotifySignalViolationAlert() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommonNotifySignalViolationAlert(CommonNotifySignalViolationAlert other) : this() {
      violationContent_ = other.violationContent_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommonNotifySignalViolationAlert Clone() {
      return new CommonNotifySignalViolationAlert(this);
    }

    /// <summary>Field number for the "violationContent" field.</summary>
    public const int ViolationContentFieldNumber = 1;
    private string violationContent_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ViolationContent {
      get { return violationContent_; }
      set {
        violationContent_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CommonNotifySignalViolationAlert);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CommonNotifySignalViolationAlert other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ViolationContent != other.ViolationContent) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ViolationContent.Length != 0) hash ^= ViolationContent.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ViolationContent.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ViolationContent);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ViolationContent.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ViolationContent);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CommonNotifySignalViolationAlert other) {
      if (other == null) {
        return;
      }
      if (other.ViolationContent.Length != 0) {
        ViolationContent = other.ViolationContent;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ViolationContent = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CommonStateSignalDisplayInfo : pb::IMessage<CommonStateSignalDisplayInfo> {
    private static readonly pb::MessageParser<CommonStateSignalDisplayInfo> _parser = new pb::MessageParser<CommonStateSignalDisplayInfo>(() => new CommonStateSignalDisplayInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CommonStateSignalDisplayInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AcFunDanmu.ZtLiveInteractiveReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommonStateSignalDisplayInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommonStateSignalDisplayInfo(CommonStateSignalDisplayInfo other) : this() {
      watchingCount_ = other.watchingCount_;
      likeCount_ = other.likeCount_;
      likeDelta_ = other.likeDelta_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommonStateSignalDisplayInfo Clone() {
      return new CommonStateSignalDisplayInfo(this);
    }

    /// <summary>Field number for the "watchingCount" field.</summary>
    public const int WatchingCountFieldNumber = 1;
    private string watchingCount_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WatchingCount {
      get { return watchingCount_; }
      set {
        watchingCount_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "likeCount" field.</summary>
    public const int LikeCountFieldNumber = 2;
    private string likeCount_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LikeCount {
      get { return likeCount_; }
      set {
        likeCount_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "likeDelta" field.</summary>
    public const int LikeDeltaFieldNumber = 3;
    private int likeDelta_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LikeDelta {
      get { return likeDelta_; }
      set {
        likeDelta_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CommonStateSignalDisplayInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CommonStateSignalDisplayInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (WatchingCount != other.WatchingCount) return false;
      if (LikeCount != other.LikeCount) return false;
      if (LikeDelta != other.LikeDelta) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (WatchingCount.Length != 0) hash ^= WatchingCount.GetHashCode();
      if (LikeCount.Length != 0) hash ^= LikeCount.GetHashCode();
      if (LikeDelta != 0) hash ^= LikeDelta.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (WatchingCount.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(WatchingCount);
      }
      if (LikeCount.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(LikeCount);
      }
      if (LikeDelta != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(LikeDelta);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (WatchingCount.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WatchingCount);
      }
      if (LikeCount.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LikeCount);
      }
      if (LikeDelta != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LikeDelta);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CommonStateSignalDisplayInfo other) {
      if (other == null) {
        return;
      }
      if (other.WatchingCount.Length != 0) {
        WatchingCount = other.WatchingCount;
      }
      if (other.LikeCount.Length != 0) {
        LikeCount = other.LikeCount;
      }
      if (other.LikeDelta != 0) {
        LikeDelta = other.LikeDelta;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            WatchingCount = input.ReadString();
            break;
          }
          case 18: {
            LikeCount = input.ReadString();
            break;
          }
          case 24: {
            LikeDelta = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CommonStateSignalTopUsers : pb::IMessage<CommonStateSignalTopUsers> {
    private static readonly pb::MessageParser<CommonStateSignalTopUsers> _parser = new pb::MessageParser<CommonStateSignalTopUsers>(() => new CommonStateSignalTopUsers());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CommonStateSignalTopUsers> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AcFunDanmu.ZtLiveInteractiveReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommonStateSignalTopUsers() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommonStateSignalTopUsers(CommonStateSignalTopUsers other) : this() {
      user_ = other.user_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommonStateSignalTopUsers Clone() {
      return new CommonStateSignalTopUsers(this);
    }

    /// <summary>Field number for the "user" field.</summary>
    public const int UserFieldNumber = 1;
    private static readonly pb::FieldCodec<global::AcFunDanmu.CommonStateSignalTopUsers.Types.TopUser> _repeated_user_codec
        = pb::FieldCodec.ForMessage(10, global::AcFunDanmu.CommonStateSignalTopUsers.Types.TopUser.Parser);
    private readonly pbc::RepeatedField<global::AcFunDanmu.CommonStateSignalTopUsers.Types.TopUser> user_ = new pbc::RepeatedField<global::AcFunDanmu.CommonStateSignalTopUsers.Types.TopUser>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AcFunDanmu.CommonStateSignalTopUsers.Types.TopUser> User {
      get { return user_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CommonStateSignalTopUsers);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CommonStateSignalTopUsers other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!user_.Equals(other.user_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= user_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      user_.WriteTo(output, _repeated_user_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += user_.CalculateSize(_repeated_user_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CommonStateSignalTopUsers other) {
      if (other == null) {
        return;
      }
      user_.Add(other.user_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            user_.AddEntriesFrom(input, _repeated_user_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the CommonStateSignalTopUsers message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class TopUser : pb::IMessage<TopUser> {
        private static readonly pb::MessageParser<TopUser> _parser = new pb::MessageParser<TopUser>(() => new TopUser());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<TopUser> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::AcFunDanmu.CommonStateSignalTopUsers.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TopUser() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TopUser(TopUser other) : this() {
          userInfo_ = other.userInfo_ != null ? other.userInfo_.Clone() : null;
          customWatchingListData_ = other.customWatchingListData_;
          displaySendAmount_ = other.displaySendAmount_;
          anonymousUser_ = other.anonymousUser_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TopUser Clone() {
          return new TopUser(this);
        }

        /// <summary>Field number for the "userInfo" field.</summary>
        public const int UserInfoFieldNumber = 1;
        private global::AcFunDanmu.ZtLiveUserInfo userInfo_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::AcFunDanmu.ZtLiveUserInfo UserInfo {
          get { return userInfo_; }
          set {
            userInfo_ = value;
          }
        }

        /// <summary>Field number for the "customWatchingListData" field.</summary>
        public const int CustomWatchingListDataFieldNumber = 2;
        private string customWatchingListData_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string CustomWatchingListData {
          get { return customWatchingListData_; }
          set {
            customWatchingListData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "displaySendAmount" field.</summary>
        public const int DisplaySendAmountFieldNumber = 3;
        private string displaySendAmount_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string DisplaySendAmount {
          get { return displaySendAmount_; }
          set {
            displaySendAmount_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "anonymousUser" field.</summary>
        public const int AnonymousUserFieldNumber = 4;
        private bool anonymousUser_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool AnonymousUser {
          get { return anonymousUser_; }
          set {
            anonymousUser_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as TopUser);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(TopUser other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(UserInfo, other.UserInfo)) return false;
          if (CustomWatchingListData != other.CustomWatchingListData) return false;
          if (DisplaySendAmount != other.DisplaySendAmount) return false;
          if (AnonymousUser != other.AnonymousUser) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (userInfo_ != null) hash ^= UserInfo.GetHashCode();
          if (CustomWatchingListData.Length != 0) hash ^= CustomWatchingListData.GetHashCode();
          if (DisplaySendAmount.Length != 0) hash ^= DisplaySendAmount.GetHashCode();
          if (AnonymousUser != false) hash ^= AnonymousUser.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (userInfo_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(UserInfo);
          }
          if (CustomWatchingListData.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(CustomWatchingListData);
          }
          if (DisplaySendAmount.Length != 0) {
            output.WriteRawTag(26);
            output.WriteString(DisplaySendAmount);
          }
          if (AnonymousUser != false) {
            output.WriteRawTag(32);
            output.WriteBool(AnonymousUser);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (userInfo_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserInfo);
          }
          if (CustomWatchingListData.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(CustomWatchingListData);
          }
          if (DisplaySendAmount.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(DisplaySendAmount);
          }
          if (AnonymousUser != false) {
            size += 1 + 1;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(TopUser other) {
          if (other == null) {
            return;
          }
          if (other.userInfo_ != null) {
            if (userInfo_ == null) {
              UserInfo = new global::AcFunDanmu.ZtLiveUserInfo();
            }
            UserInfo.MergeFrom(other.UserInfo);
          }
          if (other.CustomWatchingListData.Length != 0) {
            CustomWatchingListData = other.CustomWatchingListData;
          }
          if (other.DisplaySendAmount.Length != 0) {
            DisplaySendAmount = other.DisplaySendAmount;
          }
          if (other.AnonymousUser != false) {
            AnonymousUser = other.AnonymousUser;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (userInfo_ == null) {
                  UserInfo = new global::AcFunDanmu.ZtLiveUserInfo();
                }
                input.ReadMessage(UserInfo);
                break;
              }
              case 18: {
                CustomWatchingListData = input.ReadString();
                break;
              }
              case 26: {
                DisplaySendAmount = input.ReadString();
                break;
              }
              case 32: {
                AnonymousUser = input.ReadBool();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class CommonStateSignalRecentComment : pb::IMessage<CommonStateSignalRecentComment> {
    private static readonly pb::MessageParser<CommonStateSignalRecentComment> _parser = new pb::MessageParser<CommonStateSignalRecentComment>(() => new CommonStateSignalRecentComment());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CommonStateSignalRecentComment> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AcFunDanmu.ZtLiveInteractiveReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommonStateSignalRecentComment() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommonStateSignalRecentComment(CommonStateSignalRecentComment other) : this() {
      comment_ = other.comment_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommonStateSignalRecentComment Clone() {
      return new CommonStateSignalRecentComment(this);
    }

    /// <summary>Field number for the "comment" field.</summary>
    public const int CommentFieldNumber = 1;
    private static readonly pb::FieldCodec<global::AcFunDanmu.CommonActionSignalComment> _repeated_comment_codec
        = pb::FieldCodec.ForMessage(10, global::AcFunDanmu.CommonActionSignalComment.Parser);
    private readonly pbc::RepeatedField<global::AcFunDanmu.CommonActionSignalComment> comment_ = new pbc::RepeatedField<global::AcFunDanmu.CommonActionSignalComment>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AcFunDanmu.CommonActionSignalComment> Comment {
      get { return comment_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CommonStateSignalRecentComment);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CommonStateSignalRecentComment other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!comment_.Equals(other.comment_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= comment_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      comment_.WriteTo(output, _repeated_comment_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += comment_.CalculateSize(_repeated_comment_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CommonStateSignalRecentComment other) {
      if (other == null) {
        return;
      }
      comment_.Add(other.comment_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            comment_.AddEntriesFrom(input, _repeated_comment_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CommonStateSignalChatCall : pb::IMessage<CommonStateSignalChatCall> {
    private static readonly pb::MessageParser<CommonStateSignalChatCall> _parser = new pb::MessageParser<CommonStateSignalChatCall>(() => new CommonStateSignalChatCall());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CommonStateSignalChatCall> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AcFunDanmu.ZtLiveInteractiveReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommonStateSignalChatCall() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommonStateSignalChatCall(CommonStateSignalChatCall other) : this() {
      chatId_ = other.chatId_;
      liveId_ = other.liveId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommonStateSignalChatCall Clone() {
      return new CommonStateSignalChatCall(this);
    }

    /// <summary>Field number for the "chatId" field.</summary>
    public const int ChatIdFieldNumber = 1;
    private string chatId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ChatId {
      get { return chatId_; }
      set {
        chatId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "liveId" field.</summary>
    public const int LiveIdFieldNumber = 2;
    private string liveId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LiveId {
      get { return liveId_; }
      set {
        liveId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CommonStateSignalChatCall);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CommonStateSignalChatCall other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChatId != other.ChatId) return false;
      if (LiveId != other.LiveId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChatId.Length != 0) hash ^= ChatId.GetHashCode();
      if (LiveId.Length != 0) hash ^= LiveId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ChatId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ChatId);
      }
      if (LiveId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(LiveId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChatId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ChatId);
      }
      if (LiveId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LiveId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CommonStateSignalChatCall other) {
      if (other == null) {
        return;
      }
      if (other.ChatId.Length != 0) {
        ChatId = other.ChatId;
      }
      if (other.LiveId.Length != 0) {
        LiveId = other.LiveId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ChatId = input.ReadString();
            break;
          }
          case 18: {
            LiveId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CommonStateSignalChatAccept : pb::IMessage<CommonStateSignalChatAccept> {
    private static readonly pb::MessageParser<CommonStateSignalChatAccept> _parser = new pb::MessageParser<CommonStateSignalChatAccept>(() => new CommonStateSignalChatAccept());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CommonStateSignalChatAccept> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AcFunDanmu.ZtLiveInteractiveReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommonStateSignalChatAccept() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommonStateSignalChatAccept(CommonStateSignalChatAccept other) : this() {
      chatId_ = other.chatId_;
      mediaType_ = other.mediaType_;
      arraySignalInfo_ = other.arraySignalInfo_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommonStateSignalChatAccept Clone() {
      return new CommonStateSignalChatAccept(this);
    }

    /// <summary>Field number for the "chatId" field.</summary>
    public const int ChatIdFieldNumber = 1;
    private string chatId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ChatId {
      get { return chatId_; }
      set {
        chatId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "mediaType" field.</summary>
    public const int MediaTypeFieldNumber = 2;
    private global::AcFunDanmu.ChatMediaType mediaType_ = global::AcFunDanmu.ChatMediaType.Unknown;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AcFunDanmu.ChatMediaType MediaType {
      get { return mediaType_; }
      set {
        mediaType_ = value;
      }
    }

    /// <summary>Field number for the "arraySignalInfo" field.</summary>
    public const int ArraySignalInfoFieldNumber = 3;
    private string arraySignalInfo_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ArraySignalInfo {
      get { return arraySignalInfo_; }
      set {
        arraySignalInfo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CommonStateSignalChatAccept);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CommonStateSignalChatAccept other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChatId != other.ChatId) return false;
      if (MediaType != other.MediaType) return false;
      if (ArraySignalInfo != other.ArraySignalInfo) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChatId.Length != 0) hash ^= ChatId.GetHashCode();
      if (MediaType != global::AcFunDanmu.ChatMediaType.Unknown) hash ^= MediaType.GetHashCode();
      if (ArraySignalInfo.Length != 0) hash ^= ArraySignalInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ChatId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ChatId);
      }
      if (MediaType != global::AcFunDanmu.ChatMediaType.Unknown) {
        output.WriteRawTag(16);
        output.WriteEnum((int) MediaType);
      }
      if (ArraySignalInfo.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ArraySignalInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChatId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ChatId);
      }
      if (MediaType != global::AcFunDanmu.ChatMediaType.Unknown) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) MediaType);
      }
      if (ArraySignalInfo.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ArraySignalInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CommonStateSignalChatAccept other) {
      if (other == null) {
        return;
      }
      if (other.ChatId.Length != 0) {
        ChatId = other.ChatId;
      }
      if (other.MediaType != global::AcFunDanmu.ChatMediaType.Unknown) {
        MediaType = other.MediaType;
      }
      if (other.ArraySignalInfo.Length != 0) {
        ArraySignalInfo = other.ArraySignalInfo;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ChatId = input.ReadString();
            break;
          }
          case 16: {
            MediaType = (global::AcFunDanmu.ChatMediaType) input.ReadEnum();
            break;
          }
          case 26: {
            ArraySignalInfo = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CommonStateSignalChatReady : pb::IMessage<CommonStateSignalChatReady> {
    private static readonly pb::MessageParser<CommonStateSignalChatReady> _parser = new pb::MessageParser<CommonStateSignalChatReady>(() => new CommonStateSignalChatReady());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CommonStateSignalChatReady> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AcFunDanmu.ZtLiveInteractiveReflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommonStateSignalChatReady() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommonStateSignalChatReady(CommonStateSignalChatReady other) : this() {
      chatId_ = other.chatId_;
      guestUserInfo_ = other.guestUserInfo_ != null ? other.guestUserInfo_.Clone() : null;
      mediaType_ = other.mediaType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommonStateSignalChatReady Clone() {
      return new CommonStateSignalChatReady(this);
    }

    /// <summary>Field number for the "chatId" field.</summary>
    public const int ChatIdFieldNumber = 1;
    private string chatId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ChatId {
      get { return chatId_; }
      set {
        chatId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "guestUserInfo" field.</summary>
    public const int GuestUserInfoFieldNumber = 2;
    private global::AcFunDanmu.ZtLiveUserInfo guestUserInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AcFunDanmu.ZtLiveUserInfo GuestUserInfo {
      get { return guestUserInfo_; }
      set {
        guestUserInfo_ = value;
      }
    }

    /// <summary>Field number for the "mediaType" field.</summary>
    public const int MediaTypeFieldNumber = 3;
    private int mediaType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MediaType {
      get { return mediaType_; }
      set {
        mediaType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CommonStateSignalChatReady);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CommonStateSignalChatReady other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChatId != other.ChatId) return false;
      if (!object.Equals(GuestUserInfo, other.GuestUserInfo)) return false;
      if (MediaType != other.MediaType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChatId.Length != 0) hash ^= ChatId.GetHashCode();
      if (guestUserInfo_ != null) hash ^= GuestUserInfo.GetHashCode();
      if (MediaType != 0) hash ^= MediaType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ChatId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ChatId);
      }
      if (guestUserInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(GuestUserInfo);
      }
      if (MediaType != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(MediaType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChatId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ChatId);
      }
      if (guestUserInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GuestUserInfo);
      }
      if (MediaType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MediaType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CommonStateSignalChatReady other) {
      if (other == null) {
        return;
      }
      if (other.ChatId.Length != 0) {
        ChatId = other.ChatId;
      }
      if (other.guestUserInfo_ != null) {
        if (guestUserInfo_ == null) {
          GuestUserInfo = new global::AcFunDanmu.ZtLiveUserInfo();
        }
        GuestUserInfo.MergeFrom(other.GuestUserInfo);
      }
      if (other.MediaType != 0) {
        MediaType = other.MediaType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ChatId = input.ReadString();
            break;
          }
          case 18: {
            if (guestUserInfo_ == null) {
              GuestUserInfo = new global::AcFunDanmu.ZtLiveUserInfo();
            }
            input.ReadMessage(GuestUserInfo);
            break;
          }
          case 24: {
            MediaType = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CommonStateSignalChatEnd : pb::IMessage<CommonStateSignalChatEnd> {
    private static readonly pb::MessageParser<CommonStateSignalChatEnd> _parser = new pb::MessageParser<CommonStateSignalChatEnd>(() => new CommonStateSignalChatEnd());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CommonStateSignalChatEnd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AcFunDanmu.ZtLiveInteractiveReflection.Descriptor.MessageTypes[32]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommonStateSignalChatEnd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommonStateSignalChatEnd(CommonStateSignalChatEnd other) : this() {
      chatId_ = other.chatId_;
      endType_ = other.endType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommonStateSignalChatEnd Clone() {
      return new CommonStateSignalChatEnd(this);
    }

    /// <summary>Field number for the "chatId" field.</summary>
    public const int ChatIdFieldNumber = 1;
    private string chatId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ChatId {
      get { return chatId_; }
      set {
        chatId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "endType" field.</summary>
    public const int EndTypeFieldNumber = 2;
    private global::AcFunDanmu.CommonStateSignalChatEnd.Types.EndType endType_ = global::AcFunDanmu.CommonStateSignalChatEnd.Types.EndType.Unknown;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AcFunDanmu.CommonStateSignalChatEnd.Types.EndType EndType {
      get { return endType_; }
      set {
        endType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CommonStateSignalChatEnd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CommonStateSignalChatEnd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChatId != other.ChatId) return false;
      if (EndType != other.EndType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChatId.Length != 0) hash ^= ChatId.GetHashCode();
      if (EndType != global::AcFunDanmu.CommonStateSignalChatEnd.Types.EndType.Unknown) hash ^= EndType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ChatId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ChatId);
      }
      if (EndType != global::AcFunDanmu.CommonStateSignalChatEnd.Types.EndType.Unknown) {
        output.WriteRawTag(16);
        output.WriteEnum((int) EndType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChatId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ChatId);
      }
      if (EndType != global::AcFunDanmu.CommonStateSignalChatEnd.Types.EndType.Unknown) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) EndType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CommonStateSignalChatEnd other) {
      if (other == null) {
        return;
      }
      if (other.ChatId.Length != 0) {
        ChatId = other.ChatId;
      }
      if (other.EndType != global::AcFunDanmu.CommonStateSignalChatEnd.Types.EndType.Unknown) {
        EndType = other.EndType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ChatId = input.ReadString();
            break;
          }
          case 16: {
            EndType = (global::AcFunDanmu.CommonStateSignalChatEnd.Types.EndType) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the CommonStateSignalChatEnd message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum EndType {
        [pbr::OriginalName("UNKNOWN")] Unknown = 0,
        [pbr::OriginalName("CANCEL_BY_AUTHOR")] CancelByAuthor = 1,
        [pbr::OriginalName("END_BY_AUTHOR")] EndByAuthor = 2,
        [pbr::OriginalName("END_BY_GUEST")] EndByGuest = 3,
        [pbr::OriginalName("GUEST_REJECT")] GuestReject = 4,
        [pbr::OriginalName("GUEST_TIMEOUT")] GuestTimeout = 5,
        [pbr::OriginalName("GUEST_HEARTBEAT_TIMEOUT")] GuestHeartbeatTimeout = 6,
        [pbr::OriginalName("AUTHOR_HEARTBEAT_TIMEOUT")] AuthorHeartbeatTimeout = 7,
      }

    }
    #endregion

  }

  public sealed partial class CommonStateSignalRichText : pb::IMessage<CommonStateSignalRichText> {
    private static readonly pb::MessageParser<CommonStateSignalRichText> _parser = new pb::MessageParser<CommonStateSignalRichText>(() => new CommonStateSignalRichText());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CommonStateSignalRichText> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AcFunDanmu.ZtLiveInteractiveReflection.Descriptor.MessageTypes[33]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommonStateSignalRichText() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommonStateSignalRichText(CommonStateSignalRichText other) : this() {
      a_ = other.a_.Clone();
      b_ = other.b_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommonStateSignalRichText Clone() {
      return new CommonStateSignalRichText(this);
    }

    /// <summary>Field number for the "a" field.</summary>
    public const int AFieldNumber = 1;
    private static readonly pb::FieldCodec<global::AcFunDanmu.CommonStateSignalRichText.Types.RichTextSegment> _repeated_a_codec
        = pb::FieldCodec.ForMessage(10, global::AcFunDanmu.CommonStateSignalRichText.Types.RichTextSegment.Parser);
    private readonly pbc::RepeatedField<global::AcFunDanmu.CommonStateSignalRichText.Types.RichTextSegment> a_ = new pbc::RepeatedField<global::AcFunDanmu.CommonStateSignalRichText.Types.RichTextSegment>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AcFunDanmu.CommonStateSignalRichText.Types.RichTextSegment> A {
      get { return a_; }
    }

    /// <summary>Field number for the "b" field.</summary>
    public const int BFieldNumber = 2;
    private long b_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long B {
      get { return b_; }
      set {
        b_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CommonStateSignalRichText);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CommonStateSignalRichText other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!a_.Equals(other.a_)) return false;
      if (B != other.B) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= a_.GetHashCode();
      if (B != 0L) hash ^= B.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      a_.WriteTo(output, _repeated_a_codec);
      if (B != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(B);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += a_.CalculateSize(_repeated_a_codec);
      if (B != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(B);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CommonStateSignalRichText other) {
      if (other == null) {
        return;
      }
      a_.Add(other.a_);
      if (other.B != 0L) {
        B = other.B;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            a_.AddEntriesFrom(input, _repeated_a_codec);
            break;
          }
          case 16: {
            B = input.ReadInt64();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the CommonStateSignalRichText message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class ImageSegment : pb::IMessage<ImageSegment> {
        private static readonly pb::MessageParser<ImageSegment> _parser = new pb::MessageParser<ImageSegment>(() => new ImageSegment());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ImageSegment> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::AcFunDanmu.CommonStateSignalRichText.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ImageSegment() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ImageSegment(ImageSegment other) : this() {
          a_ = other.a_.Clone();
          b_ = other.b_;
          c_ = other.c_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ImageSegment Clone() {
          return new ImageSegment(this);
        }

        /// <summary>Field number for the "a" field.</summary>
        public const int AFieldNumber = 1;
        private static readonly pb::FieldCodec<global::AcFunDanmu.ImageCdnNode> _repeated_a_codec
            = pb::FieldCodec.ForMessage(10, global::AcFunDanmu.ImageCdnNode.Parser);
        private readonly pbc::RepeatedField<global::AcFunDanmu.ImageCdnNode> a_ = new pbc::RepeatedField<global::AcFunDanmu.ImageCdnNode>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::AcFunDanmu.ImageCdnNode> A {
          get { return a_; }
        }

        /// <summary>Field number for the "b" field.</summary>
        public const int BFieldNumber = 2;
        private string b_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string B {
          get { return b_; }
          set {
            b_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "c" field.</summary>
        public const int CFieldNumber = 3;
        private string c_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string C {
          get { return c_; }
          set {
            c_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ImageSegment);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ImageSegment other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!a_.Equals(other.a_)) return false;
          if (B != other.B) return false;
          if (C != other.C) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= a_.GetHashCode();
          if (B.Length != 0) hash ^= B.GetHashCode();
          if (C.Length != 0) hash ^= C.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          a_.WriteTo(output, _repeated_a_codec);
          if (B.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(B);
          }
          if (C.Length != 0) {
            output.WriteRawTag(26);
            output.WriteString(C);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += a_.CalculateSize(_repeated_a_codec);
          if (B.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(B);
          }
          if (C.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(C);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ImageSegment other) {
          if (other == null) {
            return;
          }
          a_.Add(other.a_);
          if (other.B.Length != 0) {
            B = other.B;
          }
          if (other.C.Length != 0) {
            C = other.C;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                a_.AddEntriesFrom(input, _repeated_a_codec);
                break;
              }
              case 18: {
                B = input.ReadString();
                break;
              }
              case 26: {
                C = input.ReadString();
                break;
              }
            }
          }
        }

      }

      public sealed partial class PlainSegment : pb::IMessage<PlainSegment> {
        private static readonly pb::MessageParser<PlainSegment> _parser = new pb::MessageParser<PlainSegment>(() => new PlainSegment());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<PlainSegment> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::AcFunDanmu.CommonStateSignalRichText.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlainSegment() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlainSegment(PlainSegment other) : this() {
          a_ = other.a_;
          b_ = other.b_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlainSegment Clone() {
          return new PlainSegment(this);
        }

        /// <summary>Field number for the "a" field.</summary>
        public const int AFieldNumber = 1;
        private string a_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string A {
          get { return a_; }
          set {
            a_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "b" field.</summary>
        public const int BFieldNumber = 2;
        private string b_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string B {
          get { return b_; }
          set {
            b_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as PlainSegment);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(PlainSegment other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (A != other.A) return false;
          if (B != other.B) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (A.Length != 0) hash ^= A.GetHashCode();
          if (B.Length != 0) hash ^= B.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (A.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(A);
          }
          if (B.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(B);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (A.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(A);
          }
          if (B.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(B);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(PlainSegment other) {
          if (other == null) {
            return;
          }
          if (other.A.Length != 0) {
            A = other.A;
          }
          if (other.B.Length != 0) {
            B = other.B;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                A = input.ReadString();
                break;
              }
              case 18: {
                B = input.ReadString();
                break;
              }
            }
          }
        }

      }

      public sealed partial class RichTextSegment : pb::IMessage<RichTextSegment> {
        private static readonly pb::MessageParser<RichTextSegment> _parser = new pb::MessageParser<RichTextSegment>(() => new RichTextSegment());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<RichTextSegment> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::AcFunDanmu.CommonStateSignalRichText.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RichTextSegment() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RichTextSegment(RichTextSegment other) : this() {
          a_ = other.a_;
          b_ = other.b_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RichTextSegment Clone() {
          return new RichTextSegment(this);
        }

        /// <summary>Field number for the "a" field.</summary>
        public const int AFieldNumber = 1;
        private int a_;
        /// <summary>
        /// 1 = UserInfoSegment, 2 = PlainSegment, 3 = ImageSegment
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int A {
          get { return a_; }
          set {
            a_ = value;
          }
        }

        /// <summary>Field number for the "b" field.</summary>
        public const int BFieldNumber = 2;
        private pb::ByteString b_ = pb::ByteString.Empty;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString B {
          get { return b_; }
          set {
            b_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as RichTextSegment);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(RichTextSegment other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (A != other.A) return false;
          if (B != other.B) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (A != 0) hash ^= A.GetHashCode();
          if (B.Length != 0) hash ^= B.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (A != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(A);
          }
          if (B.Length != 0) {
            output.WriteRawTag(18);
            output.WriteBytes(B);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (A != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(A);
          }
          if (B.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(B);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(RichTextSegment other) {
          if (other == null) {
            return;
          }
          if (other.A != 0) {
            A = other.A;
          }
          if (other.B.Length != 0) {
            B = other.B;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                A = input.ReadInt32();
                break;
              }
              case 18: {
                B = input.ReadBytes();
                break;
              }
            }
          }
        }

      }

      public sealed partial class UserInfoSegment : pb::IMessage<UserInfoSegment> {
        private static readonly pb::MessageParser<UserInfoSegment> _parser = new pb::MessageParser<UserInfoSegment>(() => new UserInfoSegment());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<UserInfoSegment> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::AcFunDanmu.CommonStateSignalRichText.Descriptor.NestedTypes[3]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public UserInfoSegment() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public UserInfoSegment(UserInfoSegment other) : this() {
          a_ = other.a_ != null ? other.a_.Clone() : null;
          b_ = other.b_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public UserInfoSegment Clone() {
          return new UserInfoSegment(this);
        }

        /// <summary>Field number for the "a" field.</summary>
        public const int AFieldNumber = 1;
        private global::AcFunDanmu.ZtLiveUserInfo a_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::AcFunDanmu.ZtLiveUserInfo A {
          get { return a_; }
          set {
            a_ = value;
          }
        }

        /// <summary>Field number for the "b" field.</summary>
        public const int BFieldNumber = 2;
        private string b_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string B {
          get { return b_; }
          set {
            b_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as UserInfoSegment);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(UserInfoSegment other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(A, other.A)) return false;
          if (B != other.B) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (a_ != null) hash ^= A.GetHashCode();
          if (B.Length != 0) hash ^= B.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (a_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(A);
          }
          if (B.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(B);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (a_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(A);
          }
          if (B.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(B);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(UserInfoSegment other) {
          if (other == null) {
            return;
          }
          if (other.a_ != null) {
            if (a_ == null) {
              A = new global::AcFunDanmu.ZtLiveUserInfo();
            }
            A.MergeFrom(other.A);
          }
          if (other.B.Length != 0) {
            B = other.B;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (a_ == null) {
                  A = new global::AcFunDanmu.ZtLiveUserInfo();
                }
                input.ReadMessage(A);
                break;
              }
              case 18: {
                B = input.ReadString();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class CommonStateSignalCurrentRedpackList : pb::IMessage<CommonStateSignalCurrentRedpackList> {
    private static readonly pb::MessageParser<CommonStateSignalCurrentRedpackList> _parser = new pb::MessageParser<CommonStateSignalCurrentRedpackList>(() => new CommonStateSignalCurrentRedpackList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CommonStateSignalCurrentRedpackList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AcFunDanmu.ZtLiveInteractiveReflection.Descriptor.MessageTypes[34]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommonStateSignalCurrentRedpackList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommonStateSignalCurrentRedpackList(CommonStateSignalCurrentRedpackList other) : this() {
      a_ = other.a_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommonStateSignalCurrentRedpackList Clone() {
      return new CommonStateSignalCurrentRedpackList(this);
    }

    /// <summary>Field number for the "a" field.</summary>
    public const int AFieldNumber = 1;
    private static readonly pb::FieldCodec<global::AcFunDanmu.CommonStateSignalCurrentRedpackList.Types.Redpack> _repeated_a_codec
        = pb::FieldCodec.ForMessage(10, global::AcFunDanmu.CommonStateSignalCurrentRedpackList.Types.Redpack.Parser);
    private readonly pbc::RepeatedField<global::AcFunDanmu.CommonStateSignalCurrentRedpackList.Types.Redpack> a_ = new pbc::RepeatedField<global::AcFunDanmu.CommonStateSignalCurrentRedpackList.Types.Redpack>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AcFunDanmu.CommonStateSignalCurrentRedpackList.Types.Redpack> A {
      get { return a_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CommonStateSignalCurrentRedpackList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CommonStateSignalCurrentRedpackList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!a_.Equals(other.a_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= a_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      a_.WriteTo(output, _repeated_a_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += a_.CalculateSize(_repeated_a_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CommonStateSignalCurrentRedpackList other) {
      if (other == null) {
        return;
      }
      a_.Add(other.a_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            a_.AddEntriesFrom(input, _repeated_a_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the CommonStateSignalCurrentRedpackList message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Redpack : pb::IMessage<Redpack> {
        private static readonly pb::MessageParser<Redpack> _parser = new pb::MessageParser<Redpack>(() => new Redpack());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Redpack> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::AcFunDanmu.CommonStateSignalCurrentRedpackList.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Redpack() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Redpack(Redpack other) : this() {
          a_ = other.a_ != null ? other.a_.Clone() : null;
          b_ = other.b_;
          c_ = other.c_;
          d_ = other.d_;
          e_ = other.e_;
          f_ = other.f_;
          g_ = other.g_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Redpack Clone() {
          return new Redpack(this);
        }

        /// <summary>Field number for the "a" field.</summary>
        public const int AFieldNumber = 1;
        private global::AcFunDanmu.ZtLiveUserInfo a_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::AcFunDanmu.ZtLiveUserInfo A {
          get { return a_; }
          set {
            a_ = value;
          }
        }

        /// <summary>Field number for the "b" field.</summary>
        public const int BFieldNumber = 2;
        private int b_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int B {
          get { return b_; }
          set {
            b_ = value;
          }
        }

        /// <summary>Field number for the "c" field.</summary>
        public const int CFieldNumber = 3;
        private long c_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long C {
          get { return c_; }
          set {
            c_ = value;
          }
        }

        /// <summary>Field number for the "d" field.</summary>
        public const int DFieldNumber = 4;
        private long d_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long D {
          get { return d_; }
          set {
            d_ = value;
          }
        }

        /// <summary>Field number for the "e" field.</summary>
        public const int EFieldNumber = 5;
        private string e_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string E {
          get { return e_; }
          set {
            e_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "f" field.</summary>
        public const int FFieldNumber = 6;
        private string f_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string F {
          get { return f_; }
          set {
            f_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "g" field.</summary>
        public const int GFieldNumber = 7;
        private long g_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long G {
          get { return g_; }
          set {
            g_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Redpack);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Redpack other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(A, other.A)) return false;
          if (B != other.B) return false;
          if (C != other.C) return false;
          if (D != other.D) return false;
          if (E != other.E) return false;
          if (F != other.F) return false;
          if (G != other.G) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (a_ != null) hash ^= A.GetHashCode();
          if (B != 0) hash ^= B.GetHashCode();
          if (C != 0L) hash ^= C.GetHashCode();
          if (D != 0L) hash ^= D.GetHashCode();
          if (E.Length != 0) hash ^= E.GetHashCode();
          if (F.Length != 0) hash ^= F.GetHashCode();
          if (G != 0L) hash ^= G.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (a_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(A);
          }
          if (B != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(B);
          }
          if (C != 0L) {
            output.WriteRawTag(24);
            output.WriteInt64(C);
          }
          if (D != 0L) {
            output.WriteRawTag(32);
            output.WriteInt64(D);
          }
          if (E.Length != 0) {
            output.WriteRawTag(42);
            output.WriteString(E);
          }
          if (F.Length != 0) {
            output.WriteRawTag(50);
            output.WriteString(F);
          }
          if (G != 0L) {
            output.WriteRawTag(56);
            output.WriteInt64(G);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (a_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(A);
          }
          if (B != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(B);
          }
          if (C != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(C);
          }
          if (D != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(D);
          }
          if (E.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(E);
          }
          if (F.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(F);
          }
          if (G != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(G);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Redpack other) {
          if (other == null) {
            return;
          }
          if (other.a_ != null) {
            if (a_ == null) {
              A = new global::AcFunDanmu.ZtLiveUserInfo();
            }
            A.MergeFrom(other.A);
          }
          if (other.B != 0) {
            B = other.B;
          }
          if (other.C != 0L) {
            C = other.C;
          }
          if (other.D != 0L) {
            D = other.D;
          }
          if (other.E.Length != 0) {
            E = other.E;
          }
          if (other.F.Length != 0) {
            F = other.F;
          }
          if (other.G != 0L) {
            G = other.G;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (a_ == null) {
                  A = new global::AcFunDanmu.ZtLiveUserInfo();
                }
                input.ReadMessage(A);
                break;
              }
              case 16: {
                B = input.ReadInt32();
                break;
              }
              case 24: {
                C = input.ReadInt64();
                break;
              }
              case 32: {
                D = input.ReadInt64();
                break;
              }
              case 42: {
                E = input.ReadString();
                break;
              }
              case 50: {
                F = input.ReadString();
                break;
              }
              case 56: {
                G = input.ReadInt64();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class CommonStateSignalFeatureStateSync : pb::IMessage<CommonStateSignalFeatureStateSync> {
    private static readonly pb::MessageParser<CommonStateSignalFeatureStateSync> _parser = new pb::MessageParser<CommonStateSignalFeatureStateSync>(() => new CommonStateSignalFeatureStateSync());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CommonStateSignalFeatureStateSync> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AcFunDanmu.ZtLiveInteractiveReflection.Descriptor.MessageTypes[35]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommonStateSignalFeatureStateSync() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommonStateSignalFeatureStateSync(CommonStateSignalFeatureStateSync other) : this() {
      a_ = other.a_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommonStateSignalFeatureStateSync Clone() {
      return new CommonStateSignalFeatureStateSync(this);
    }

    /// <summary>Field number for the "a" field.</summary>
    public const int AFieldNumber = 1;
    private static readonly pb::FieldCodec<global::AcFunDanmu.LiveFeatureState> _repeated_a_codec
        = pb::FieldCodec.ForMessage(10, global::AcFunDanmu.LiveFeatureState.Parser);
    private readonly pbc::RepeatedField<global::AcFunDanmu.LiveFeatureState> a_ = new pbc::RepeatedField<global::AcFunDanmu.LiveFeatureState>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AcFunDanmu.LiveFeatureState> A {
      get { return a_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CommonStateSignalFeatureStateSync);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CommonStateSignalFeatureStateSync other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!a_.Equals(other.a_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= a_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      a_.WriteTo(output, _repeated_a_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += a_.CalculateSize(_repeated_a_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CommonStateSignalFeatureStateSync other) {
      if (other == null) {
        return;
      }
      a_.Add(other.a_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            a_.AddEntriesFrom(input, _repeated_a_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class LiveFeatureState : pb::IMessage<LiveFeatureState> {
    private static readonly pb::MessageParser<LiveFeatureState> _parser = new pb::MessageParser<LiveFeatureState>(() => new LiveFeatureState());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LiveFeatureState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AcFunDanmu.ZtLiveInteractiveReflection.Descriptor.MessageTypes[36]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LiveFeatureState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LiveFeatureState(LiveFeatureState other) : this() {
      a_ = other.a_;
      b_ = other.b_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LiveFeatureState Clone() {
      return new LiveFeatureState(this);
    }

    /// <summary>Field number for the "a" field.</summary>
    public const int AFieldNumber = 1;
    private int a_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int A {
      get { return a_; }
      set {
        a_ = value;
      }
    }

    /// <summary>Field number for the "b" field.</summary>
    public const int BFieldNumber = 2;
    private int b_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int B {
      get { return b_; }
      set {
        b_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LiveFeatureState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LiveFeatureState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (A != other.A) return false;
      if (B != other.B) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (A != 0) hash ^= A.GetHashCode();
      if (B != 0) hash ^= B.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (A != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(A);
      }
      if (B != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(B);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (A != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(A);
      }
      if (B != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(B);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LiveFeatureState other) {
      if (other == null) {
        return;
      }
      if (other.A != 0) {
        A = other.A;
      }
      if (other.B != 0) {
        B = other.B;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            A = input.ReadInt32();
            break;
          }
          case 16: {
            B = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
